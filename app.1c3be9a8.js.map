{"mappings":"ACKA,MAAM,iBACF,aAAc,CACV,IAAI,CAAC,gBAAgB,CAAG,IAAI,IAC5B,IAAI,CAAC,gBAAgB,EACzB,CAQA,KAAK,CAAE,CAAE,EAAU,CAAC,CAAC,CAAE,CACnB,GAAM,CACF,QAAA,EAAU,YAAY,CACtB,KAAA,EAAO,SAAS,CAChB,UAAA,EAAY,IAAI,CAChB,QAAA,EAAU,CAAA,CAAK,CAClB,CAAG,CAGA,CAAA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAC1B,IAAI,CAAC,IAAI,CAAC,GAGd,IAAM,EAAY,IAAI,CAAC,eAAe,CAAC,EAAI,EAAS,EAAM,GAE1D,GAAI,EAAW,CACX,IAAM,EAAmB,AAAqB,UAArB,OAAO,EAC1B,SAAS,aAAa,CAAC,GACvB,EACF,EACA,EAAiB,WAAW,CAAC,GAE7B,SAAS,IAAI,CAAC,WAAW,CAAC,EAElC,MACI,SAAS,IAAI,CAAC,WAAW,CAAC,GAI9B,OADA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAI,GACvB,CACX,CAMA,KAAK,CAAE,CAAE,CACL,IAAM,EAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GACxC,IACA,EAAU,SAAS,CAAC,GAAG,CAAC,0BACxB,WAAW,KACP,EAAU,MAAM,GAChB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EACjC,EAAG,KAEX,CAOA,cAAc,CAAE,CAAE,CAAO,CAAE,CACvB,IAAM,EAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAC5C,GAAI,EAAW,CACX,IAAM,EAAiB,EAAU,aAAa,CAAC,mBAC3C,CAAA,GACA,CAAA,EAAe,WAAW,CAAG,CADjC,CAGJ,CACJ,CAOA,eAAe,CAAE,CAAE,CAAO,CAAE,CACxB,IAAM,EAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAC5C,GAAI,EAAW,CACX,IAAM,EAAc,EAAU,aAAa,CAAC,wBACxC,CAAA,GACA,CAAA,EAAY,KAAK,CAAC,KAAK,CAAG,CAAA,EAAG,KAAK,GAAG,CAAC,IAAK,KAAK,GAAG,CAAC,EAAG,IAAU,CAAC,CAAC,AAAD,CAE1E,CACJ,CAKA,gBAAgB,CAAE,CAAE,CAAO,CAAE,CAAI,CAAE,CAAO,CAAE,CACxC,IAAM,EAAU,SAAS,aAAa,CAAC,MACvC,CAAA,EAAQ,EAAE,CAAG,CAAC,QAAQ,EAAE,EAAA,CAAI,CAC5B,EAAQ,SAAS,CAAG,CAAC,kBAAkB,EAAE,EAAU,kBAAoB,GAAA,CAAI,CAC3E,EAAQ,YAAY,CAAC,OAAQ,UAC7B,EAAQ,YAAY,CAAC,YAAa,UAElC,IAAI,EAAU,GACd,OAAQ,GACJ,IAAK,MACD,EAAU;A;AAE2B,qDAAA,EAAE,EAAQ;A;A;A;A;AAK/C,gBAAA,CAAC,CACD,KACJ,KAAK,OACD,EAAU;A;A;A;A;A;A;AAO2B,qDAAA,EAAE,EAAQ;A;AAE/C,gBAAA,CAAC,CACD,KACJ,SAEI,EAAU;A;A;A;A;A;A;AAO2B,qDAAA,EAAE,EAAQ;A;AAE/C,gBAAA,CAAC,AACT,CAGA,OADA,EAAQ,SAAS,CAAG,EACb,CACX,CAKA,kBAAmB,CACf,GAAI,SAAS,cAAc,CAAC,0BACxB,OAGJ,IAAM,EAAQ,SAAS,aAAa,CAAC,QACrC,CAAA,EAAM,EAAE,CAAG,yBACX,EAAM,WAAW,CAAG;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;A;AA4KpB,QAAA,CAAC,CACD,SAAS,IAAI,CAAC,WAAW,CAAC,EAC9B,CACJ,CAGA,IAAM,iBAAmB,IAAI,gBAEzB,AAAkB,CAAA,aAAlB,OAAO,QACP,CAAA,OAAO,gBAAgB,CAAG,gBAD9B","sources":["<anon>","src/scripts/ui/loadingIndicator.js"],"sourcesContent":["/**\n * Modern Loading Indicator System\n * Provides beautiful, non-blocking loading indicators\n */ class LoadingIndicator {\n    constructor(){\n        this.activeIndicators = new Map();\n        this.initializeStyles();\n    }\n    /**\n     * Show a loading indicator\n     * @param {string} id - Unique identifier for this loading operation\n     * @param {Object} options - Configuration options\n     * @returns {string} The loading indicator ID\n     */ show(id, options = {}) {\n        const { message = \"Loading...\", type = \"spinner\", container = null, overlay = false } = options;\n        // Remove existing indicator with same ID\n        if (this.activeIndicators.has(id)) this.hide(id);\n        const indicator = this.createIndicator(id, message, type, overlay);\n        if (container) {\n            const containerElement = typeof container === \"string\" ? document.querySelector(container) : container;\n            if (containerElement) containerElement.appendChild(indicator);\n            else document.body.appendChild(indicator);\n        } else document.body.appendChild(indicator);\n        this.activeIndicators.set(id, indicator);\n        return id;\n    }\n    /**\n     * Hide a loading indicator\n     * @param {string} id - The loading indicator ID\n     */ hide(id) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            indicator.classList.add(\"loading-indicator-hide\");\n            setTimeout(()=>{\n                indicator.remove();\n                this.activeIndicators.delete(id);\n            }, 300);\n        }\n    }\n    /**\n     * Update loading indicator message\n     * @param {string} id - The loading indicator ID\n     * @param {string} message - New message\n     */ updateMessage(id, message) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            const messageElement = indicator.querySelector(\".loading-message\");\n            if (messageElement) messageElement.textContent = message;\n        }\n    }\n    /**\n     * Update progress bar\n     * @param {string} id - The loading indicator ID\n     * @param {number} percent - Progress percentage (0-100)\n     */ updateProgress(id, percent) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            const progressBar = indicator.querySelector(\".loading-progress-bar\");\n            if (progressBar) progressBar.style.width = `${Math.min(100, Math.max(0, percent))}%`;\n        }\n    }\n    /**\n     * Create loading indicator element\n     */ createIndicator(id, message, type, overlay) {\n        const wrapper = document.createElement(\"div\");\n        wrapper.id = `loading-${id}`;\n        wrapper.className = `loading-indicator ${overlay ? \"loading-overlay\" : \"\"}`;\n        wrapper.setAttribute(\"role\", \"status\");\n        wrapper.setAttribute(\"aria-live\", \"polite\");\n        let content = \"\";\n        switch(type){\n            case \"bar\":\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-message\">${message}</div>\n                        <div class=\"loading-progress\">\n                            <div class=\"loading-progress-bar\"></div>\n                        </div>\n                    </div>\n                `;\n                break;\n            case \"dots\":\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-dots\">\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                        <div class=\"loading-message\">${message}</div>\n                    </div>\n                `;\n                break;\n            case \"spinner\":\n            default:\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-spinner\">\n                            <svg viewBox=\"0 0 50 50\">\n                                <circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"4\"></circle>\n                            </svg>\n                        </div>\n                        <div class=\"loading-message\">${message}</div>\n                    </div>\n                `;\n        }\n        wrapper.innerHTML = content;\n        return wrapper;\n    }\n    /**\n     * Initialize loading indicator styles\n     */ initializeStyles() {\n        if (document.getElementById(\"loadingIndicatorStyles\")) return;\n        const style = document.createElement(\"style\");\n        style.id = \"loadingIndicatorStyles\";\n        style.textContent = `\n            .loading-indicator {\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                z-index: 9999;\n                background: var(--bg-primary, #fff);\n                padding: 24px 32px;\n                border-radius: 12px;\n                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n                animation: loadingFadeIn 0.3s ease;\n            }\n\n            .loading-indicator.loading-overlay::before {\n                content: \"\";\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.5);\n                z-index: -1;\n                backdrop-filter: blur(4px);\n            }\n\n            .loading-indicator-hide {\n                animation: loadingFadeOut 0.3s ease forwards;\n            }\n\n            .loading-content {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                gap: 16px;\n                min-width: 200px;\n            }\n\n            .loading-message {\n                font-size: 14px;\n                font-weight: 500;\n                color: var(--text-primary, #212529);\n                text-align: center;\n            }\n\n            /* Spinner */\n            .loading-spinner {\n                width: 48px;\n                height: 48px;\n            }\n\n            .loading-spinner svg {\n                width: 100%;\n                height: 100%;\n                animation: loadingRotate 1s linear infinite;\n            }\n\n            .loading-spinner circle {\n                stroke: #007bff;\n                stroke-linecap: round;\n                stroke-dasharray: 1, 150;\n                stroke-dashoffset: 0;\n                animation: loadingDash 1.5s ease-in-out infinite;\n            }\n\n            /* Dots */\n            .loading-dots {\n                display: flex;\n                gap: 8px;\n            }\n\n            .loading-dots span {\n                width: 12px;\n                height: 12px;\n                border-radius: 50%;\n                background: #007bff;\n                animation: loadingBounce 1.4s infinite ease-in-out both;\n            }\n\n            .loading-dots span:nth-child(1) {\n                animation-delay: -0.32s;\n            }\n\n            .loading-dots span:nth-child(2) {\n                animation-delay: -0.16s;\n            }\n\n            /* Progress Bar */\n            .loading-progress {\n                width: 100%;\n                height: 4px;\n                background: #e9ecef;\n                border-radius: 2px;\n                overflow: hidden;\n            }\n\n            .loading-progress-bar {\n                height: 100%;\n                background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n                border-radius: 2px;\n                transition: width 0.3s ease;\n                width: 0%;\n            }\n\n            /* Animations */\n            @keyframes loadingFadeIn {\n                from {\n                    opacity: 0;\n                    transform: translate(-50%, -50%) scale(0.9);\n                }\n                to {\n                    opacity: 1;\n                    transform: translate(-50%, -50%) scale(1);\n                }\n            }\n\n            @keyframes loadingFadeOut {\n                from {\n                    opacity: 1;\n                    transform: translate(-50%, -50%) scale(1);\n                }\n                to {\n                    opacity: 0;\n                    transform: translate(-50%, -50%) scale(0.9);\n                }\n            }\n\n            @keyframes loadingRotate {\n                100% {\n                    transform: rotate(360deg);\n                }\n            }\n\n            @keyframes loadingDash {\n                0% {\n                    stroke-dasharray: 1, 150;\n                    stroke-dashoffset: 0;\n                }\n                50% {\n                    stroke-dasharray: 90, 150;\n                    stroke-dashoffset: -35;\n                }\n                100% {\n                    stroke-dasharray: 90, 150;\n                    stroke-dashoffset: -124;\n                }\n            }\n\n            @keyframes loadingBounce {\n                0%, 80%, 100% {\n                    transform: scale(0);\n                }\n                40% {\n                    transform: scale(1);\n                }\n            }\n\n            /* Dark theme */\n            [data-theme=\"dark\"] .loading-indicator {\n                background: var(--bg-primary, #1a1a1a);\n                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n            }\n\n            /* Reduced motion */\n            @media (prefers-reduced-motion: reduce) {\n                .loading-indicator,\n                .loading-spinner svg,\n                .loading-dots span,\n                .loading-progress-bar {\n                    animation: none !important;\n                }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n// Create global instance and make available globally\nconst loadingIndicator = new LoadingIndicator();\nif (typeof window !== \"undefined\") window.loadingIndicator = loadingIndicator;\n\n//# sourceMappingURL=app.1c3be9a8.js.map\n","/**\n * Modern Loading Indicator System\n * Provides beautiful, non-blocking loading indicators\n */\n\nclass LoadingIndicator {\n    constructor() {\n        this.activeIndicators = new Map();\n        this.initializeStyles();\n    }\n\n    /**\n     * Show a loading indicator\n     * @param {string} id - Unique identifier for this loading operation\n     * @param {Object} options - Configuration options\n     * @returns {string} The loading indicator ID\n     */\n    show(id, options = {}) {\n        const {\n            message = \"Loading...\",\n            type = \"spinner\", // spinner, bar, dots\n            container = null,\n            overlay = false,\n        } = options;\n\n        // Remove existing indicator with same ID\n        if (this.activeIndicators.has(id)) {\n            this.hide(id);\n        }\n\n        const indicator = this.createIndicator(id, message, type, overlay);\n\n        if (container) {\n            const containerElement = typeof container === \"string\"\n                ? document.querySelector(container)\n                : container;\n            if (containerElement) {\n                containerElement.appendChild(indicator);\n            } else {\n                document.body.appendChild(indicator);\n            }\n        } else {\n            document.body.appendChild(indicator);\n        }\n\n        this.activeIndicators.set(id, indicator);\n        return id;\n    }\n\n    /**\n     * Hide a loading indicator\n     * @param {string} id - The loading indicator ID\n     */\n    hide(id) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            indicator.classList.add(\"loading-indicator-hide\");\n            setTimeout(() => {\n                indicator.remove();\n                this.activeIndicators.delete(id);\n            }, 300);\n        }\n    }\n\n    /**\n     * Update loading indicator message\n     * @param {string} id - The loading indicator ID\n     * @param {string} message - New message\n     */\n    updateMessage(id, message) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            const messageElement = indicator.querySelector(\".loading-message\");\n            if (messageElement) {\n                messageElement.textContent = message;\n            }\n        }\n    }\n\n    /**\n     * Update progress bar\n     * @param {string} id - The loading indicator ID\n     * @param {number} percent - Progress percentage (0-100)\n     */\n    updateProgress(id, percent) {\n        const indicator = this.activeIndicators.get(id);\n        if (indicator) {\n            const progressBar = indicator.querySelector(\".loading-progress-bar\");\n            if (progressBar) {\n                progressBar.style.width = `${Math.min(100, Math.max(0, percent))}%`;\n            }\n        }\n    }\n\n    /**\n     * Create loading indicator element\n     */\n    createIndicator(id, message, type, overlay) {\n        const wrapper = document.createElement(\"div\");\n        wrapper.id = `loading-${id}`;\n        wrapper.className = `loading-indicator ${overlay ? \"loading-overlay\" : \"\"}`;\n        wrapper.setAttribute(\"role\", \"status\");\n        wrapper.setAttribute(\"aria-live\", \"polite\");\n\n        let content = \"\";\n        switch (type) {\n            case \"bar\":\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-message\">${message}</div>\n                        <div class=\"loading-progress\">\n                            <div class=\"loading-progress-bar\"></div>\n                        </div>\n                    </div>\n                `;\n                break;\n            case \"dots\":\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-dots\">\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                        <div class=\"loading-message\">${message}</div>\n                    </div>\n                `;\n                break;\n            case \"spinner\":\n            default:\n                content = `\n                    <div class=\"loading-content\">\n                        <div class=\"loading-spinner\">\n                            <svg viewBox=\"0 0 50 50\">\n                                <circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"4\"></circle>\n                            </svg>\n                        </div>\n                        <div class=\"loading-message\">${message}</div>\n                    </div>\n                `;\n        }\n\n        wrapper.innerHTML = content;\n        return wrapper;\n    }\n\n    /**\n     * Initialize loading indicator styles\n     */\n    initializeStyles() {\n        if (document.getElementById(\"loadingIndicatorStyles\")) {\n            return;\n        }\n\n        const style = document.createElement(\"style\");\n        style.id = \"loadingIndicatorStyles\";\n        style.textContent = `\n            .loading-indicator {\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                z-index: 9999;\n                background: var(--bg-primary, #fff);\n                padding: 24px 32px;\n                border-radius: 12px;\n                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\n                animation: loadingFadeIn 0.3s ease;\n            }\n\n            .loading-indicator.loading-overlay::before {\n                content: \"\";\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.5);\n                z-index: -1;\n                backdrop-filter: blur(4px);\n            }\n\n            .loading-indicator-hide {\n                animation: loadingFadeOut 0.3s ease forwards;\n            }\n\n            .loading-content {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                gap: 16px;\n                min-width: 200px;\n            }\n\n            .loading-message {\n                font-size: 14px;\n                font-weight: 500;\n                color: var(--text-primary, #212529);\n                text-align: center;\n            }\n\n            /* Spinner */\n            .loading-spinner {\n                width: 48px;\n                height: 48px;\n            }\n\n            .loading-spinner svg {\n                width: 100%;\n                height: 100%;\n                animation: loadingRotate 1s linear infinite;\n            }\n\n            .loading-spinner circle {\n                stroke: #007bff;\n                stroke-linecap: round;\n                stroke-dasharray: 1, 150;\n                stroke-dashoffset: 0;\n                animation: loadingDash 1.5s ease-in-out infinite;\n            }\n\n            /* Dots */\n            .loading-dots {\n                display: flex;\n                gap: 8px;\n            }\n\n            .loading-dots span {\n                width: 12px;\n                height: 12px;\n                border-radius: 50%;\n                background: #007bff;\n                animation: loadingBounce 1.4s infinite ease-in-out both;\n            }\n\n            .loading-dots span:nth-child(1) {\n                animation-delay: -0.32s;\n            }\n\n            .loading-dots span:nth-child(2) {\n                animation-delay: -0.16s;\n            }\n\n            /* Progress Bar */\n            .loading-progress {\n                width: 100%;\n                height: 4px;\n                background: #e9ecef;\n                border-radius: 2px;\n                overflow: hidden;\n            }\n\n            .loading-progress-bar {\n                height: 100%;\n                background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);\n                border-radius: 2px;\n                transition: width 0.3s ease;\n                width: 0%;\n            }\n\n            /* Animations */\n            @keyframes loadingFadeIn {\n                from {\n                    opacity: 0;\n                    transform: translate(-50%, -50%) scale(0.9);\n                }\n                to {\n                    opacity: 1;\n                    transform: translate(-50%, -50%) scale(1);\n                }\n            }\n\n            @keyframes loadingFadeOut {\n                from {\n                    opacity: 1;\n                    transform: translate(-50%, -50%) scale(1);\n                }\n                to {\n                    opacity: 0;\n                    transform: translate(-50%, -50%) scale(0.9);\n                }\n            }\n\n            @keyframes loadingRotate {\n                100% {\n                    transform: rotate(360deg);\n                }\n            }\n\n            @keyframes loadingDash {\n                0% {\n                    stroke-dasharray: 1, 150;\n                    stroke-dashoffset: 0;\n                }\n                50% {\n                    stroke-dasharray: 90, 150;\n                    stroke-dashoffset: -35;\n                }\n                100% {\n                    stroke-dasharray: 90, 150;\n                    stroke-dashoffset: -124;\n                }\n            }\n\n            @keyframes loadingBounce {\n                0%, 80%, 100% {\n                    transform: scale(0);\n                }\n                40% {\n                    transform: scale(1);\n                }\n            }\n\n            /* Dark theme */\n            [data-theme=\"dark\"] .loading-indicator {\n                background: var(--bg-primary, #1a1a1a);\n                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);\n            }\n\n            /* Reduced motion */\n            @media (prefers-reduced-motion: reduce) {\n                .loading-indicator,\n                .loading-spinner svg,\n                .loading-dots span,\n                .loading-progress-bar {\n                    animation: none !important;\n                }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n\n// Create global instance and make available globally\nconst loadingIndicator = new LoadingIndicator();\n\nif (typeof window !== \"undefined\") {\n    window.loadingIndicator = loadingIndicator;\n}\n"],"names":["LoadingIndicator","activeIndicators","Map","initializeStyles","show","id","options","message","type","container","overlay","has","hide","indicator","createIndicator","containerElement","document","querySelector","appendChild","body","set","get","classList","add","setTimeout","remove","delete","updateMessage","messageElement","textContent","updateProgress","percent","progressBar","style","width","Math","min","max","wrapper","createElement","className","setAttribute","content","innerHTML","getElementById","head","loadingIndicator","window"],"version":3,"file":"app.1c3be9a8.js.map"}