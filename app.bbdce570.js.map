{"mappings":"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","sources":["<anon>","src/scripts/eventHandlers.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireaed0\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireaed0\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $5qD1E = parcelRequire(\"5qD1E\");\n\nvar $2UrZ2 = parcelRequire(\"2UrZ2\");\n\nvar $e8aKe = parcelRequire(\"e8aKe\");\n\nvar $ftuQo = parcelRequire(\"ftuQo\");\n// Get references to the cy, info, and walks elements\nconst $c33e153c3b84c13d$var$cyContainer = document.getElementById(\"cy\");\nconst $c33e153c3b84c13d$var$infoPanel = document.getElementById(\"info\");\nconst $c33e153c3b84c13d$var$walksPanel = document.getElementById(\"walks\");\n// Get references to the maximize button and set initial state\nconst $c33e153c3b84c13d$var$maximizeButton = document.getElementById(\"toggleMaximize\");\nlet $c33e153c3b84c13d$var$isMaximized = false;\n// Add click event listener to the maximize button only if it exists\nif ($c33e153c3b84c13d$var$maximizeButton) $c33e153c3b84c13d$var$maximizeButton.addEventListener(\"click\", ()=>{\n    if ($c33e153c3b84c13d$var$isMaximized) {\n        // Restore previous layout\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$isMaximized = false;\n    } else {\n        // Maximize cy panel\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"100%\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"100vh\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$isMaximized = true;\n    }\n});\nelse console.warn(\"Element with ID 'toggleMaximize' not found in the DOM\");\nfunction $c33e153c3b84c13d$var$toggleLabels() {\n    // Update labelsVisible state\n    const nodelabelStyle = !(0, $e8aKe.getLabelsVisible)() ? function(ele) {\n        return ele.data(\"gene_name\") ? ele.data(\"gene_name\") : \"\";\n    } : \"\";\n    const edgeLabelStyle = !(0, $e8aKe.getLabelsVisible)() ? function(ele) {\n        return ele.data(\"weight\") ? ele.data(\"weight\") : \"\";\n    } : \"\";\n    (0, $5qD1E.STATE).cy.style().selector(\"node\") // Select nodes\n    .style({\n        label: nodelabelStyle\n    }).selector(\"edge\") // Select edges\n    .style({\n        label: edgeLabelStyle\n    }).update(); // Important to update the style\n    (0, $e8aKe.setLabelsVisible)(!(0, $e8aKe.getLabelsVisible)());\n}\n// Add a null check before attaching the event listener\nconst $c33e153c3b84c13d$var$hiddenLabelBtn = document.getElementById(\"hiddenLabel\");\nif ($c33e153c3b84c13d$var$hiddenLabelBtn) $c33e153c3b84c13d$var$hiddenLabelBtn.addEventListener(\"click\", $c33e153c3b84c13d$var$toggleLabels);\nelse console.warn(\"Element with ID 'hiddenLabel' not found in the DOM\");\nconst $c33e153c3b84c13d$var$captureGraphBtn = document.getElementById(\"captureGraph\");\nif ($c33e153c3b84c13d$var$captureGraphBtn) $c33e153c3b84c13d$var$captureGraphBtn.addEventListener(\"click\", ()=>{\n    $c33e153c3b84c13d$var$showExportDialog();\n});\nelse console.warn(\"Element with ID 'captureGraph' not found in the DOM\");\n/**\n * Show a modern export dialog with format options\n */ function $c33e153c3b84c13d$var$showExportDialog() {\n    if (!(0, $5qD1E.STATE).cy) {\n        window.showAlert?.(\"No graph loaded to export\", \"error\");\n        return;\n    }\n    // Create modal if it doesn't exist\n    let modal = document.getElementById(\"exportModal\");\n    if (!modal) {\n        modal = $c33e153c3b84c13d$var$createExportModal();\n        document.body.appendChild(modal);\n    }\n    // Show the modal\n    const bsModal = new bootstrap.Modal(modal);\n    bsModal.show();\n    // Set up export handlers\n    $c33e153c3b84c13d$var$setupExportHandlers(modal, bsModal);\n}\n/**\n * Create the export modal HTML\n */ function $c33e153c3b84c13d$var$createExportModal() {\n    const modal = document.createElement(\"div\");\n    modal.id = \"exportModal\";\n    modal.className = \"modal fade\";\n    modal.setAttribute(\"tabindex\", \"-1\");\n    modal.innerHTML = `\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">\n            <i class=\"bi bi-download me-2\"></i>Export Graph\n          </h5>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <label class=\"form-label fw-bold\">Select Export Format:</label>\n            <div class=\"export-format-grid\">\n              <div class=\"export-format-option\" data-format=\"png\">\n                <i class=\"bi bi-file-earmark-image\"></i>\n                <div class=\"format-name\">PNG</div>\n                <div class=\"format-desc\">Raster image, best for presentations</div>\n              </div>\n              <div class=\"export-format-option\" data-format=\"jpg\">\n                <i class=\"bi bi-file-earmark-image-fill\"></i>\n                <div class=\"format-name\">JPG</div>\n                <div class=\"format-desc\">Compressed image, smaller file size</div>\n              </div>\n              <div class=\"export-format-option active\" data-format=\"svg\">\n                <i class=\"bi bi-file-earmark-code\"></i>\n                <div class=\"format-name\">SVG</div>\n                <div class=\"format-desc\">Vector image, scalable and editable</div>\n              </div>\n              <div class=\"export-format-option\" data-format=\"json\">\n                <i class=\"bi bi-filetype-json\"></i>\n                <div class=\"format-name\">JSON</div>\n                <div class=\"format-desc\">Graph data for reloading</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"mb-3\" id=\"exportOptions\">\n            <label class=\"form-label fw-bold\">Options:</label>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"exportFullGraph\" checked>\n              <label class=\"form-check-label\" for=\"exportFullGraph\">\n                Export full graph (include all elements)\n              </label>\n            </div>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"exportTransparentBg\">\n              <label class=\"form-check-label\" for=\"exportTransparentBg\">\n                Transparent background\n              </label>\n            </div>\n          </div>\n\n          <div class=\"mb-3\" id=\"scaleOptions\">\n            <label for=\"exportScale\" class=\"form-label fw-bold\">Scale:</label>\n            <input type=\"range\" class=\"form-range\" id=\"exportScale\" min=\"1\" max=\"4\" step=\"0.5\" value=\"2\">\n            <div class=\"d-flex justify-content-between\">\n              <small>1x</small>\n              <small id=\"scaleValue\">2x</small>\n              <small>4x</small>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n          <button type=\"button\" class=\"btn btn-primary\" id=\"confirmExport\">\n            <i class=\"bi bi-download me-2\"></i>Export\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n    // Add styles\n    if (!document.getElementById(\"exportModalStyles\")) {\n        const style = document.createElement(\"style\");\n        style.id = \"exportModalStyles\";\n        style.textContent = `\n      .export-format-grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 12px;\n        margin-top: 12px;\n      }\n\n      .export-format-option {\n        border: 2px solid #dee2e6;\n        border-radius: 8px;\n        padding: 16px;\n        text-align: center;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: var(--bg-primary, #fff);\n      }\n\n      .export-format-option:hover {\n        border-color: #007bff;\n        background: var(--bg-secondary, #f8f9fa);\n      }\n\n      .export-format-option.active {\n        border-color: #007bff;\n        background: rgba(0, 123, 255, 0.1);\n      }\n\n      .export-format-option i {\n        font-size: 2rem;\n        color: #007bff;\n        margin-bottom: 8px;\n      }\n\n      .format-name {\n        font-weight: bold;\n        margin-bottom: 4px;\n        color: var(--text-primary, #212529);\n      }\n\n      .format-desc {\n        font-size: 0.75rem;\n        color: #6c757d;\n      }\n\n      [data-theme=\"dark\"] .export-format-option {\n        background: var(--bg-primary, #1a1a1a);\n        border-color: #495057;\n      }\n\n      [data-theme=\"dark\"] .export-format-option:hover {\n        background: var(--bg-secondary, #2d2d2d);\n      }\n    `;\n        document.head.appendChild(style);\n    }\n    return modal;\n}\n/**\n * Set up export event handlers\n */ function $c33e153c3b84c13d$var$setupExportHandlers(modal, bsModal) {\n    // Format selection\n    const formatOptions = modal.querySelectorAll(\".export-format-option\");\n    formatOptions.forEach((option)=>{\n        option.addEventListener(\"click\", ()=>{\n            formatOptions.forEach((o)=>o.classList.remove(\"active\"));\n            option.classList.add(\"active\");\n            $c33e153c3b84c13d$var$updateExportOptions(option.dataset.format, modal);\n        });\n    });\n    // Scale slider\n    const scaleSlider = modal.querySelector(\"#exportScale\");\n    const scaleValue = modal.querySelector(\"#scaleValue\");\n    if (scaleSlider && scaleValue) scaleSlider.addEventListener(\"input\", (e)=>{\n        scaleValue.textContent = `${e.target.value}x`;\n    });\n    // Export button\n    const exportBtn = modal.querySelector(\"#confirmExport\");\n    if (exportBtn) {\n        exportBtn.replaceWith(exportBtn.cloneNode(true));\n        const newExportBtn = modal.querySelector(\"#confirmExport\");\n        newExportBtn.addEventListener(\"click\", async ()=>{\n            const activeFormat = modal.querySelector(\".export-format-option.active\");\n            const format = activeFormat?.dataset.format || \"svg\";\n            const scale = parseFloat(scaleSlider?.value || 2);\n            const fullGraph = modal.querySelector(\"#exportFullGraph\")?.checked ?? true;\n            const transparentBg = modal.querySelector(\"#exportTransparentBg\")?.checked ?? false;\n            try {\n                await $c33e153c3b84c13d$var$exportGraph(format, {\n                    scale: scale,\n                    fullGraph: fullGraph,\n                    transparentBg: transparentBg\n                });\n                bsModal.hide();\n                window.showAlert?.(`Graph exported as ${format.toUpperCase()}!`, \"success\", 2000);\n            } catch (error) {\n                console.error(\"Export failed:\", error);\n                window.showAlert?.(`Export failed: ${error.message}`, \"error\");\n            }\n        });\n    }\n}\n/**\n * Update export options based on selected format\n */ function $c33e153c3b84c13d$var$updateExportOptions(format, modal) {\n    const scaleOptions = modal.querySelector(\"#scaleOptions\");\n    const exportOptions = modal.querySelector(\"#exportOptions\");\n    if (format === \"json\") {\n        scaleOptions.style.display = \"none\";\n        exportOptions.style.display = \"none\";\n    } else {\n        scaleOptions.style.display = format === \"svg\" ? \"none\" : \"block\";\n        exportOptions.style.display = \"block\";\n    }\n}\n/**\n * Export graph in the specified format\n */ async function $c33e153c3b84c13d$var$exportGraph(format, options = {}) {\n    if (!(0, $5qD1E.STATE).cy) throw new Error(\"No graph loaded\");\n    const { scale: scale = 2, fullGraph: fullGraph = true, transparentBg: transparentBg = false } = options;\n    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, \"-\");\n    let data, filename, mimeType;\n    switch(format){\n        case \"png\":\n            data = (0, $5qD1E.STATE).cy.png({\n                full: fullGraph,\n                scale: scale,\n                bg: transparentBg ? \"transparent\" : \"#ffffff\"\n            });\n            filename = `graph_${timestamp}.png`;\n            break;\n        case \"jpg\":\n            data = (0, $5qD1E.STATE).cy.jpg({\n                full: fullGraph,\n                scale: scale,\n                bg: transparentBg ? \"#ffffff\" : \"#ffffff\",\n                quality: 0.9\n            });\n            filename = `graph_${timestamp}.jpg`;\n            break;\n        case \"svg\":\n            // Cytoscape SVG export\n            const svgContent = (0, $5qD1E.STATE).cy.svg({\n                full: fullGraph,\n                bg: transparentBg ? \"transparent\" : \"#ffffff\"\n            });\n            const blob = new Blob([\n                svgContent\n            ], {\n                type: \"image/svg+xml\"\n            });\n            data = URL.createObjectURL(blob);\n            filename = `graph_${timestamp}.svg`;\n            mimeType = \"image/svg+xml\";\n            break;\n        case \"json\":\n            const jsonData = (0, $5qD1E.STATE).cy.json();\n            const jsonBlob = new Blob([\n                JSON.stringify(jsonData, null, 2)\n            ], {\n                type: \"application/json\"\n            });\n            data = URL.createObjectURL(jsonBlob);\n            filename = `graph_${timestamp}.json`;\n            mimeType = \"application/json\";\n            break;\n        default:\n            throw new Error(`Unsupported format: ${format}`);\n    }\n    // Download the file\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = data;\n    downloadLink.download = filename;\n    downloadLink.click();\n    // Clean up blob URLs\n    if (format === \"svg\" || format === \"json\") setTimeout(()=>URL.revokeObjectURL(data), 100);\n}\nconst $c33e153c3b84c13d$var$redirectToIgvBtn = document.getElementById(\"redirectToIgv\");\nif ($c33e153c3b84c13d$var$redirectToIgvBtn) $c33e153c3b84c13d$var$redirectToIgvBtn.addEventListener(\"click\", ()=>{\n    window.open(\"igv.html\", \"_blank\");\n});\nelse console.warn(\"Element with ID 'redirectToIgv' not found in the DOM\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    (0, $2UrZ2.resizePanels)();\n});\nconst $c33e153c3b84c13d$var$uploadInput = document.getElementById(\"uploadInput\");\nif ($c33e153c3b84c13d$var$uploadInput) $c33e153c3b84c13d$var$uploadInput.addEventListener(\"change\", $c33e153c3b84c13d$var$handleFileUpload);\nelse console.warn(\"Element with ID 'uploadInput' not found in the DOM\");\nfunction $c33e153c3b84c13d$var$handleFileUpload(event) {\n    const file = event.target.files[0];\n    console.log(file);\n    if (!file) return;\n    // Show loading indicator\n    const loadingId = `upload-${Date.now()}`;\n    window.loadingIndicator?.show(loadingId, {\n        message: `Loading ${file.name}...`,\n        type: \"spinner\",\n        overlay: true\n    });\n    const reader = new FileReader();\n    reader.onload = async (e)=>{\n        const content = e.target.result;\n        const fileExtension = file.name.split(\".\").pop().toLowerCase();\n        try {\n            if (fileExtension === \"json\") {\n                window.loadingIndicator?.updateMessage(loadingId, \"Parsing JSON data...\");\n                // Handle JSON file\n                const jsonData = JSON.parse(content);\n                console.log(\"Loaded JSON data:\", jsonData);\n                window.loadingIndicator?.updateMessage(loadingId, \"Rendering graph...\");\n                (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n                // Hide graph selector for single JSON files\n                document.getElementById(\"graphSelectorContainer\").style.display = \"none\";\n                window.loadingIndicator?.hide(loadingId);\n                window.showAlert?.(\"Graph loaded successfully!\", \"success\", 2000);\n            } else if (fileExtension === \"tsg\") {\n                window.loadingIndicator?.updateMessage(loadingId, \"Parsing TSG file...\");\n                // Handle TSG file\n                console.log(\"Loaded TSG data\");\n                // wait for the result from promise\n                (0, $5qD1E.STATE).graph_jsons = await window.parse_tsgFile(content);\n                console.log(`Number of graph JSONs: ${(0, $5qD1E.STATE).graph_jsons.length}`);\n                // Show graph selector if multiple graphs are available\n                const graphCount = (0, $5qD1E.STATE).graph_jsons.length;\n                window.loadingIndicator?.updateMessage(loadingId, `Found ${graphCount} graph${graphCount > 1 ? \"s\" : \"\"}...`);\n                if (graphCount > 1) $c33e153c3b84c13d$var$setupGraphSelector(graphCount);\n                else document.getElementById(\"graphSelectorContainer\").style.display = \"none\";\n                // Load the first graph by default\n                window.loadingIndicator?.updateMessage(loadingId, \"Rendering graph...\");\n                const jsonData = JSON.parse((0, $5qD1E.STATE).graph_jsons[0]);\n                (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n                window.loadingIndicator?.hide(loadingId);\n                window.showAlert?.(`Loaded ${graphCount} graph${graphCount > 1 ? \"s\" : \"\"} successfully!`, \"success\", 2000);\n            }\n        } catch (error) {\n            console.error(\"Error processing file:\", error);\n            window.loadingIndicator?.hide(loadingId);\n            window.showAlert?.(\"Error processing file: \" + error.message, \"error\");\n        }\n    };\n    reader.onerror = ()=>{\n        window.loadingIndicator?.hide(loadingId);\n        window.showAlert?.(\"Failed to read file\", \"error\");\n    };\n    reader.readAsText(file);\n}\n/**\n * Sets up the graph selector dropdown with options based on the number of available graphs\n * @param {number} graphCount - The number of available graphs\n */ function $c33e153c3b84c13d$var$setupGraphSelector(graphCount) {\n    const graphSelect = document.getElementById(\"graphSelect\");\n    const graphSelectorContainer = document.getElementById(\"graphSelectorContainer\");\n    // Clear existing options\n    graphSelect.innerHTML = \"\";\n    // Add options for each graph\n    for(let i = 0; i < graphCount; i++){\n        const option = document.createElement(\"option\");\n        option.value = i;\n        option.textContent = `Graph ${i + 1}`;\n        graphSelect.appendChild(option);\n    }\n    // Show the selector\n    graphSelectorContainer.style.display = \"block\";\n    // Add event listener for graph selection\n    graphSelect.addEventListener(\"change\", function() {\n        const selectedIndex = parseInt(this.value);\n        if ((0, $5qD1E.STATE).graph_jsons && (0, $5qD1E.STATE).graph_jsons.length > selectedIndex) try {\n            // Parse and load the selected graph\n            const jsonData = JSON.parse((0, $5qD1E.STATE).graph_jsons[selectedIndex]);\n            (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n            window.showAlert(`Loaded graph ${selectedIndex + 1}`, \"success\", 2000);\n        } catch (error) {\n            console.error(\"Error loading selected graph:\", error);\n            window.showAlert(`Error loading graph ${selectedIndex + 1}: ${error.message}`, \"error\");\n        }\n    });\n}\n// Add the clear highlights button event handler\nconst $c33e153c3b84c13d$var$clearHighlightsBtn = document.getElementById(\"clearHighlights\");\nif ($c33e153c3b84c13d$var$clearHighlightsBtn) $c33e153c3b84c13d$var$clearHighlightsBtn.addEventListener(\"click\", ()=>{\n    (0, $5qD1E.clearNodeHighlights)((0, $5qD1E.STATE).cy);\n});\nelse console.warn(\"Element with ID 'clearHighlights' not found in the DOM\");\n// Gene annotation direct action (if modal doesn't work for some reason)\nconst $c33e153c3b84c13d$var$geneAnnotationBtn = document.getElementById(\"geneAnnotationBtn\");\nif ($c33e153c3b84c13d$var$geneAnnotationBtn) $c33e153c3b84c13d$var$geneAnnotationBtn.addEventListener(\"click\", async (e)=>{\n    // Direct annotation without modal\n    if (e.ctrlKey || !window.bootstrap) {\n        e.preventDefault();\n        await $c33e153c3b84c13d$var$handleGeneAnnotation();\n    } else // Bootstrap modal approach\n    try {\n        const modal = new bootstrap.Modal(document.getElementById(\"geneAnnotationModal\"));\n        modal.show();\n    } catch (error) {\n        console.error(\"Error showing modal, falling back to direct annotation:\", error);\n        await $c33e153c3b84c13d$var$handleGeneAnnotation();\n    }\n});\nelse console.warn(\"Element with ID 'geneAnnotationBtn' not found in the DOM\");\n/**\n * Handle direct gene annotation when modal is unavailable\n */ async function $c33e153c3b84c13d$var$handleGeneAnnotation() {\n    const loadingId = `gene-annotation-${Date.now()}`;\n    try {\n        console.log(\"Starting gene annotation process directly...\");\n        // Show modern loading indicator\n        window.loadingIndicator?.show(loadingId, {\n            message: \"Loading gene database...\",\n            type: \"bar\",\n            overlay: true\n        });\n        // Try loading the gene data\n        const loaded = await (0, $ftuQo.loadGeneData)();\n        if (loaded && (0, $5qD1E.STATE).cy) {\n            console.log(\"Gene data loaded successfully, annotating nodes...\");\n            // Update loading message\n            window.loadingIndicator?.updateMessage(loadingId, \"Annotating nodes...\");\n            // Annotate all nodes in the graph\n            const nodeCount = (0, $5qD1E.STATE).cy.nodes().length;\n            const annotatedCount = await (0, $ftuQo.annotateAllNodes)((0, $5qD1E.STATE).cy);\n            // Update progress\n            window.loadingIndicator?.updateProgress(loadingId, 100);\n            // Hide loading and show success\n            setTimeout(()=>{\n                window.loadingIndicator?.hide(loadingId);\n                window.showAlert?.(`Annotated ${annotatedCount} of ${nodeCount} nodes with gene information!`, \"success\", 3000);\n            }, 500);\n        } else {\n            console.error(\"Could not load gene data or graph not initialized\");\n            window.loadingIndicator?.hide(loadingId);\n            window.showAlert?.(\"Failed to load gene annotations.\", \"error\");\n        }\n    } catch (error) {\n        console.error(\"Error in gene annotation:\", error);\n        window.loadingIndicator?.hide(loadingId);\n        window.showAlert?.(\"Error in gene annotation process: \" + error.message, \"error\");\n    }\n}\n// Add event handler for Aurora IDs file upload\ndocument.addEventListener(\"click\", (event)=>{\n    if (event.target.id === \"uploadAuroraIds\" || event.target.parentElement && event.target.parentElement.id === \"uploadAuroraIds\") {\n        const fileInput = document.getElementById(\"auroraIdsFile\");\n        if (fileInput && window.handleAuroraIdsFileUpload) window.handleAuroraIdsFileUpload();\n    }\n});\n// Make the Aurora ID file upload handler globally available\nif (typeof window !== \"undefined\" && typeof window.handleAuroraIdsFileUpload === \"undefined\" && typeof handleAuroraIdsFileUpload === \"function\") window.handleAuroraIdsFileUpload = handleAuroraIdsFileUpload;\n// Add event handler for toolbar collapse toggle on mobile devices\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n    const toolbar = document.querySelector(\".toolbar-responsive\");\n    if (collapseToolbarBtn && toolbar) {\n        // Default to collapsed state on small screens\n        if (window.innerWidth < 768) {\n            toolbar.classList.add(\"toolbar-collapsed\");\n            collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n        }\n        collapseToolbarBtn.addEventListener(\"click\", function() {\n            toolbar.classList.toggle(\"toolbar-collapsed\");\n            // Update the icon based on collapsed state\n            if (toolbar.classList.contains(\"toolbar-collapsed\")) collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n            else collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-up\"></i>';\n        });\n    }\n});\n// Also handle window resize events to maintain UI consistency\nwindow.addEventListener(\"resize\", function() {\n    const toolbar = document.querySelector(\".toolbar-responsive\");\n    const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n    if (toolbar && collapseToolbarBtn) {\n        if (window.innerWidth >= 768) // On larger screens, always expand toolbar\n        toolbar.classList.remove(\"toolbar-collapsed\");\n        else if (!toolbar.classList.contains(\"toolbar-collapsed\")) {\n            // On smaller screens, collapse by default if not already collapsed\n            toolbar.classList.add(\"toolbar-collapsed\");\n            collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n        }\n    }\n});\n\n\n//# sourceMappingURL=app.bbdce570.js.map\n","import { STATE, clearNodeHighlights } from \"./graph\";\nimport { resizePanels } from \"./graphUtilities\";\nimport { loadGraphDataFromServer } from \"./graph\";\nimport { getLabelsVisible, setLabelsVisible } from \"./graphSetup\";\nimport { loadGeneData, annotateAllNodes } from \"./geneAnnotation\";\n\n// Get references to the cy, info, and walks elements\nconst cyContainer = document.getElementById(\"cy\");\nconst infoPanel = document.getElementById(\"info\");\nconst walksPanel = document.getElementById(\"walks\");\n\n// Get references to the maximize button and set initial state\nconst maximizeButton = document.getElementById(\"toggleMaximize\");\nlet isMaximized = false;\n\n// Add click event listener to the maximize button only if it exists\nif (maximizeButton) {\n  maximizeButton.addEventListener(\"click\", () => {\n    if (isMaximized) {\n      // Restore previous layout\n      cyContainer.style.width = \"\";\n      cyContainer.style.height = \"\";\n      infoPanel.style.display = \"\";\n      walksPanel.style.display = \"\";\n      isMaximized = false;\n    } else {\n      // Maximize cy panel\n      cyContainer.style.width = \"100%\";\n      cyContainer.style.height = \"100vh\";\n      infoPanel.style.display = \"none\";\n      walksPanel.style.display = \"none\";\n      isMaximized = true;\n    }\n  });\n} else {\n  console.warn(\"Element with ID 'toggleMaximize' not found in the DOM\");\n}\n\nfunction toggleLabels() {\n  // Update labelsVisible state\n  const nodelabelStyle = !getLabelsVisible()\n    ? function (ele) {\n        return ele.data(\"gene_name\") ? ele.data(\"gene_name\") : \"\";\n      }\n    : \"\";\n  const edgeLabelStyle = !getLabelsVisible()\n    ? function (ele) {\n        return ele.data(\"weight\") ? ele.data(\"weight\") : \"\";\n      }\n    : \"\";\n\n  STATE.cy\n    .style()\n    .selector(\"node\") // Select nodes\n    .style({\n      label: nodelabelStyle,\n    })\n    .selector(\"edge\") // Select edges\n    .style({\n      label: edgeLabelStyle, // Toggles edge labels based on weight\n    })\n    .update(); // Important to update the style\n  setLabelsVisible(!getLabelsVisible());\n}\n\n// Add a null check before attaching the event listener\nconst hiddenLabelBtn = document.getElementById(\"hiddenLabel\");\nif (hiddenLabelBtn) {\n  hiddenLabelBtn.addEventListener(\"click\", toggleLabels);\n} else {\n  console.warn(\"Element with ID 'hiddenLabel' not found in the DOM\");\n}\n\nconst captureGraphBtn = document.getElementById(\"captureGraph\");\nif (captureGraphBtn) {\n  captureGraphBtn.addEventListener(\"click\", () => {\n    showExportDialog();\n  });\n} else {\n  console.warn(\"Element with ID 'captureGraph' not found in the DOM\");\n}\n\n/**\n * Show a modern export dialog with format options\n */\nfunction showExportDialog() {\n  if (!STATE.cy) {\n    window.showAlert?.(\"No graph loaded to export\", \"error\");\n    return;\n  }\n\n  // Create modal if it doesn't exist\n  let modal = document.getElementById(\"exportModal\");\n  if (!modal) {\n    modal = createExportModal();\n    document.body.appendChild(modal);\n  }\n\n  // Show the modal\n  const bsModal = new bootstrap.Modal(modal);\n  bsModal.show();\n\n  // Set up export handlers\n  setupExportHandlers(modal, bsModal);\n}\n\n/**\n * Create the export modal HTML\n */\nfunction createExportModal() {\n  const modal = document.createElement(\"div\");\n  modal.id = \"exportModal\";\n  modal.className = \"modal fade\";\n  modal.setAttribute(\"tabindex\", \"-1\");\n  modal.innerHTML = `\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\">\n            <i class=\"bi bi-download me-2\"></i>Export Graph\n          </h5>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n        </div>\n        <div class=\"modal-body\">\n          <div class=\"mb-3\">\n            <label class=\"form-label fw-bold\">Select Export Format:</label>\n            <div class=\"export-format-grid\">\n              <div class=\"export-format-option\" data-format=\"png\">\n                <i class=\"bi bi-file-earmark-image\"></i>\n                <div class=\"format-name\">PNG</div>\n                <div class=\"format-desc\">Raster image, best for presentations</div>\n              </div>\n              <div class=\"export-format-option\" data-format=\"jpg\">\n                <i class=\"bi bi-file-earmark-image-fill\"></i>\n                <div class=\"format-name\">JPG</div>\n                <div class=\"format-desc\">Compressed image, smaller file size</div>\n              </div>\n              <div class=\"export-format-option active\" data-format=\"svg\">\n                <i class=\"bi bi-file-earmark-code\"></i>\n                <div class=\"format-name\">SVG</div>\n                <div class=\"format-desc\">Vector image, scalable and editable</div>\n              </div>\n              <div class=\"export-format-option\" data-format=\"json\">\n                <i class=\"bi bi-filetype-json\"></i>\n                <div class=\"format-name\">JSON</div>\n                <div class=\"format-desc\">Graph data for reloading</div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"mb-3\" id=\"exportOptions\">\n            <label class=\"form-label fw-bold\">Options:</label>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"exportFullGraph\" checked>\n              <label class=\"form-check-label\" for=\"exportFullGraph\">\n                Export full graph (include all elements)\n              </label>\n            </div>\n            <div class=\"form-check\">\n              <input class=\"form-check-input\" type=\"checkbox\" id=\"exportTransparentBg\">\n              <label class=\"form-check-label\" for=\"exportTransparentBg\">\n                Transparent background\n              </label>\n            </div>\n          </div>\n\n          <div class=\"mb-3\" id=\"scaleOptions\">\n            <label for=\"exportScale\" class=\"form-label fw-bold\">Scale:</label>\n            <input type=\"range\" class=\"form-range\" id=\"exportScale\" min=\"1\" max=\"4\" step=\"0.5\" value=\"2\">\n            <div class=\"d-flex justify-content-between\">\n              <small>1x</small>\n              <small id=\"scaleValue\">2x</small>\n              <small>4x</small>\n            </div>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n          <button type=\"button\" class=\"btn btn-primary\" id=\"confirmExport\">\n            <i class=\"bi bi-download me-2\"></i>Export\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Add styles\n  if (!document.getElementById(\"exportModalStyles\")) {\n    const style = document.createElement(\"style\");\n    style.id = \"exportModalStyles\";\n    style.textContent = `\n      .export-format-grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 12px;\n        margin-top: 12px;\n      }\n\n      .export-format-option {\n        border: 2px solid #dee2e6;\n        border-radius: 8px;\n        padding: 16px;\n        text-align: center;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: var(--bg-primary, #fff);\n      }\n\n      .export-format-option:hover {\n        border-color: #007bff;\n        background: var(--bg-secondary, #f8f9fa);\n      }\n\n      .export-format-option.active {\n        border-color: #007bff;\n        background: rgba(0, 123, 255, 0.1);\n      }\n\n      .export-format-option i {\n        font-size: 2rem;\n        color: #007bff;\n        margin-bottom: 8px;\n      }\n\n      .format-name {\n        font-weight: bold;\n        margin-bottom: 4px;\n        color: var(--text-primary, #212529);\n      }\n\n      .format-desc {\n        font-size: 0.75rem;\n        color: #6c757d;\n      }\n\n      [data-theme=\"dark\"] .export-format-option {\n        background: var(--bg-primary, #1a1a1a);\n        border-color: #495057;\n      }\n\n      [data-theme=\"dark\"] .export-format-option:hover {\n        background: var(--bg-secondary, #2d2d2d);\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  return modal;\n}\n\n/**\n * Set up export event handlers\n */\nfunction setupExportHandlers(modal, bsModal) {\n  // Format selection\n  const formatOptions = modal.querySelectorAll(\".export-format-option\");\n  formatOptions.forEach((option) => {\n    option.addEventListener(\"click\", () => {\n      formatOptions.forEach((o) => o.classList.remove(\"active\"));\n      option.classList.add(\"active\");\n      updateExportOptions(option.dataset.format, modal);\n    });\n  });\n\n  // Scale slider\n  const scaleSlider = modal.querySelector(\"#exportScale\");\n  const scaleValue = modal.querySelector(\"#scaleValue\");\n  if (scaleSlider && scaleValue) {\n    scaleSlider.addEventListener(\"input\", (e) => {\n      scaleValue.textContent = `${e.target.value}x`;\n    });\n  }\n\n  // Export button\n  const exportBtn = modal.querySelector(\"#confirmExport\");\n  if (exportBtn) {\n    exportBtn.replaceWith(exportBtn.cloneNode(true));\n    const newExportBtn = modal.querySelector(\"#confirmExport\");\n    newExportBtn.addEventListener(\"click\", async () => {\n      const activeFormat = modal.querySelector(\".export-format-option.active\");\n      const format = activeFormat?.dataset.format || \"svg\";\n      const scale = parseFloat(scaleSlider?.value || 2);\n      const fullGraph = modal.querySelector(\"#exportFullGraph\")?.checked ?? true;\n      const transparentBg = modal.querySelector(\"#exportTransparentBg\")?.checked ?? false;\n\n      try {\n        await exportGraph(format, { scale, fullGraph, transparentBg });\n        bsModal.hide();\n        window.showAlert?.(`Graph exported as ${format.toUpperCase()}!`, \"success\", 2000);\n      } catch (error) {\n        console.error(\"Export failed:\", error);\n        window.showAlert?.(`Export failed: ${error.message}`, \"error\");\n      }\n    });\n  }\n}\n\n/**\n * Update export options based on selected format\n */\nfunction updateExportOptions(format, modal) {\n  const scaleOptions = modal.querySelector(\"#scaleOptions\");\n  const exportOptions = modal.querySelector(\"#exportOptions\");\n\n  if (format === \"json\") {\n    scaleOptions.style.display = \"none\";\n    exportOptions.style.display = \"none\";\n  } else {\n    scaleOptions.style.display = format === \"svg\" ? \"none\" : \"block\";\n    exportOptions.style.display = \"block\";\n  }\n}\n\n/**\n * Export graph in the specified format\n */\nasync function exportGraph(format, options = {}) {\n  if (!STATE.cy) {\n    throw new Error(\"No graph loaded\");\n  }\n\n  const { scale = 2, fullGraph = true, transparentBg = false } = options;\n  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, \"-\");\n  let data, filename, mimeType;\n\n  switch (format) {\n    case \"png\":\n      data = STATE.cy.png({\n        full: fullGraph,\n        scale: scale,\n        bg: transparentBg ? \"transparent\" : \"#ffffff\",\n      });\n      filename = `graph_${timestamp}.png`;\n      break;\n\n    case \"jpg\":\n      data = STATE.cy.jpg({\n        full: fullGraph,\n        scale: scale,\n        bg: transparentBg ? \"#ffffff\" : \"#ffffff\",\n        quality: 0.9,\n      });\n      filename = `graph_${timestamp}.jpg`;\n      break;\n\n    case \"svg\":\n      // Cytoscape SVG export\n      const svgContent = STATE.cy.svg({\n        full: fullGraph,\n        bg: transparentBg ? \"transparent\" : \"#ffffff\",\n      });\n      const blob = new Blob([svgContent], { type: \"image/svg+xml\" });\n      data = URL.createObjectURL(blob);\n      filename = `graph_${timestamp}.svg`;\n      mimeType = \"image/svg+xml\";\n      break;\n\n    case \"json\":\n      const jsonData = STATE.cy.json();\n      const jsonBlob = new Blob([JSON.stringify(jsonData, null, 2)], {\n        type: \"application/json\",\n      });\n      data = URL.createObjectURL(jsonBlob);\n      filename = `graph_${timestamp}.json`;\n      mimeType = \"application/json\";\n      break;\n\n    default:\n      throw new Error(`Unsupported format: ${format}`);\n  }\n\n  // Download the file\n  const downloadLink = document.createElement(\"a\");\n  downloadLink.href = data;\n  downloadLink.download = filename;\n  downloadLink.click();\n\n  // Clean up blob URLs\n  if (format === \"svg\" || format === \"json\") {\n    setTimeout(() => URL.revokeObjectURL(data), 100);\n  }\n}\n\nconst redirectToIgvBtn = document.getElementById(\"redirectToIgv\");\nif (redirectToIgvBtn) {\n  redirectToIgvBtn.addEventListener(\"click\", () => {\n    window.open(\"igv.html\", \"_blank\");\n  });\n} else {\n  console.warn(\"Element with ID 'redirectToIgv' not found in the DOM\");\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  resizePanels();\n});\n\nconst uploadInput = document.getElementById(\"uploadInput\");\nif (uploadInput) {\n  uploadInput.addEventListener(\"change\", handleFileUpload);\n} else {\n  console.warn(\"Element with ID 'uploadInput' not found in the DOM\");\n}\n\nfunction handleFileUpload(event) {\n  const file = event.target.files[0];\n  console.log(file);\n  if (!file) return;\n\n  // Show loading indicator\n  const loadingId = `upload-${Date.now()}`;\n  window.loadingIndicator?.show(loadingId, {\n    message: `Loading ${file.name}...`,\n    type: \"spinner\",\n    overlay: true,\n  });\n\n  const reader = new FileReader();\n\n  reader.onload = async (e) => {\n    const content = e.target.result;\n    const fileExtension = file.name.split(\".\").pop().toLowerCase();\n\n    try {\n      if (fileExtension === \"json\") {\n        window.loadingIndicator?.updateMessage(loadingId, \"Parsing JSON data...\");\n        // Handle JSON file\n        const jsonData = JSON.parse(content);\n        console.log(\"Loaded JSON data:\", jsonData);\n\n        window.loadingIndicator?.updateMessage(loadingId, \"Rendering graph...\");\n        loadGraphDataFromServer(jsonData);\n\n        // Hide graph selector for single JSON files\n        document.getElementById(\"graphSelectorContainer\").style.display =\n          \"none\";\n\n        window.loadingIndicator?.hide(loadingId);\n        window.showAlert?.(\"Graph loaded successfully!\", \"success\", 2000);\n      } else if (fileExtension === \"tsg\") {\n        window.loadingIndicator?.updateMessage(loadingId, \"Parsing TSG file...\");\n        // Handle TSG file\n        console.log(\"Loaded TSG data\");\n        // wait for the result from promise\n        STATE.graph_jsons = await window.parse_tsgFile(content);\n        console.log(`Number of graph JSONs: ${STATE.graph_jsons.length}`);\n\n        // Show graph selector if multiple graphs are available\n        const graphCount = STATE.graph_jsons.length;\n        window.loadingIndicator?.updateMessage(\n          loadingId,\n          `Found ${graphCount} graph${graphCount > 1 ? \"s\" : \"\"}...`\n        );\n\n        if (graphCount > 1) {\n          setupGraphSelector(graphCount);\n        } else {\n          document.getElementById(\"graphSelectorContainer\").style.display =\n            \"none\";\n        }\n\n        // Load the first graph by default\n        window.loadingIndicator?.updateMessage(loadingId, \"Rendering graph...\");\n        const jsonData = JSON.parse(STATE.graph_jsons[0]);\n        loadGraphDataFromServer(jsonData);\n\n        window.loadingIndicator?.hide(loadingId);\n        window.showAlert?.(\n          `Loaded ${graphCount} graph${graphCount > 1 ? \"s\" : \"\"} successfully!`,\n          \"success\",\n          2000\n        );\n      }\n    } catch (error) {\n      console.error(\"Error processing file:\", error);\n      window.loadingIndicator?.hide(loadingId);\n      window.showAlert?.(\"Error processing file: \" + error.message, \"error\");\n    }\n  };\n\n  reader.onerror = () => {\n    window.loadingIndicator?.hide(loadingId);\n    window.showAlert?.(\"Failed to read file\", \"error\");\n  };\n\n  reader.readAsText(file);\n}\n\n/**\n * Sets up the graph selector dropdown with options based on the number of available graphs\n * @param {number} graphCount - The number of available graphs\n */\nfunction setupGraphSelector(graphCount) {\n  const graphSelect = document.getElementById(\"graphSelect\");\n  const graphSelectorContainer = document.getElementById(\n    \"graphSelectorContainer\"\n  );\n\n  // Clear existing options\n  graphSelect.innerHTML = \"\";\n\n  // Add options for each graph\n  for (let i = 0; i < graphCount; i++) {\n    const option = document.createElement(\"option\");\n    option.value = i;\n    option.textContent = `Graph ${i + 1}`;\n    graphSelect.appendChild(option);\n  }\n\n  // Show the selector\n  graphSelectorContainer.style.display = \"block\";\n\n  // Add event listener for graph selection\n  graphSelect.addEventListener(\"change\", function () {\n    const selectedIndex = parseInt(this.value);\n    if (STATE.graph_jsons && STATE.graph_jsons.length > selectedIndex) {\n      try {\n        // Parse and load the selected graph\n        const jsonData = JSON.parse(STATE.graph_jsons[selectedIndex]);\n        loadGraphDataFromServer(jsonData);\n        window.showAlert(`Loaded graph ${selectedIndex + 1}`, \"success\", 2000);\n      } catch (error) {\n        console.error(\"Error loading selected graph:\", error);\n        window.showAlert(\n          `Error loading graph ${selectedIndex + 1}: ${error.message}`,\n          \"error\"\n        );\n      }\n    }\n  });\n}\n\n// Add the clear highlights button event handler\nconst clearHighlightsBtn = document.getElementById(\"clearHighlights\");\nif (clearHighlightsBtn) {\n  clearHighlightsBtn.addEventListener(\"click\", () => {\n    clearNodeHighlights(STATE.cy);\n  });\n} else {\n  console.warn(\"Element with ID 'clearHighlights' not found in the DOM\");\n}\n\n// Gene annotation direct action (if modal doesn't work for some reason)\nconst geneAnnotationBtn = document.getElementById(\"geneAnnotationBtn\");\nif (geneAnnotationBtn) {\n  geneAnnotationBtn.addEventListener(\"click\", async (e) => {\n    // Direct annotation without modal\n    if (e.ctrlKey || !window.bootstrap) {\n      e.preventDefault();\n      await handleGeneAnnotation();\n    } else {\n      // Bootstrap modal approach\n      try {\n        const modal = new bootstrap.Modal(\n          document.getElementById(\"geneAnnotationModal\")\n        );\n        modal.show();\n      } catch (error) {\n        console.error(\n          \"Error showing modal, falling back to direct annotation:\",\n          error\n        );\n        await handleGeneAnnotation();\n      }\n    }\n  });\n} else {\n  console.warn(\"Element with ID 'geneAnnotationBtn' not found in the DOM\");\n}\n\n/**\n * Handle direct gene annotation when modal is unavailable\n */\nasync function handleGeneAnnotation() {\n  const loadingId = `gene-annotation-${Date.now()}`;\n\n  try {\n    console.log(\"Starting gene annotation process directly...\");\n\n    // Show modern loading indicator\n    window.loadingIndicator?.show(loadingId, {\n      message: \"Loading gene database...\",\n      type: \"bar\",\n      overlay: true,\n    });\n\n    // Try loading the gene data\n    const loaded = await loadGeneData();\n\n    if (loaded && STATE.cy) {\n      console.log(\"Gene data loaded successfully, annotating nodes...\");\n\n      // Update loading message\n      window.loadingIndicator?.updateMessage(loadingId, \"Annotating nodes...\");\n\n      // Annotate all nodes in the graph\n      const nodeCount = STATE.cy.nodes().length;\n      const annotatedCount = await annotateAllNodes(STATE.cy);\n\n      // Update progress\n      window.loadingIndicator?.updateProgress(loadingId, 100);\n\n      // Hide loading and show success\n      setTimeout(() => {\n        window.loadingIndicator?.hide(loadingId);\n        window.showAlert?.(\n          `Annotated ${annotatedCount} of ${nodeCount} nodes with gene information!`,\n          \"success\",\n          3000\n        );\n      }, 500);\n    } else {\n      console.error(\"Could not load gene data or graph not initialized\");\n      window.loadingIndicator?.hide(loadingId);\n      window.showAlert?.(\"Failed to load gene annotations.\", \"error\");\n    }\n  } catch (error) {\n    console.error(\"Error in gene annotation:\", error);\n    window.loadingIndicator?.hide(loadingId);\n    window.showAlert?.(\"Error in gene annotation process: \" + error.message, \"error\");\n  }\n}\n\n// Add event handler for Aurora IDs file upload\ndocument.addEventListener(\"click\", (event) => {\n  if (\n    event.target.id === \"uploadAuroraIds\" ||\n    (event.target.parentElement &&\n      event.target.parentElement.id === \"uploadAuroraIds\")\n  ) {\n    const fileInput = document.getElementById(\"auroraIdsFile\");\n    if (fileInput && window.handleAuroraIdsFileUpload) {\n      window.handleAuroraIdsFileUpload();\n    }\n  }\n});\n\n// Make the Aurora ID file upload handler globally available\nif (\n  typeof window !== \"undefined\" &&\n  typeof window.handleAuroraIdsFileUpload === \"undefined\" &&\n  typeof handleAuroraIdsFileUpload === \"function\"\n) {\n  window.handleAuroraIdsFileUpload = handleAuroraIdsFileUpload;\n}\n\n// Add event handler for toolbar collapse toggle on mobile devices\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n  const toolbar = document.querySelector(\".toolbar-responsive\");\n\n  if (collapseToolbarBtn && toolbar) {\n    // Default to collapsed state on small screens\n    if (window.innerWidth < 768) {\n      toolbar.classList.add(\"toolbar-collapsed\");\n      collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n    }\n\n    collapseToolbarBtn.addEventListener(\"click\", function () {\n      toolbar.classList.toggle(\"toolbar-collapsed\");\n\n      // Update the icon based on collapsed state\n      if (toolbar.classList.contains(\"toolbar-collapsed\")) {\n        collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n      } else {\n        collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-up\"></i>';\n      }\n    });\n  }\n});\n\n// Also handle window resize events to maintain UI consistency\nwindow.addEventListener(\"resize\", function () {\n  const toolbar = document.querySelector(\".toolbar-responsive\");\n  const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n\n  if (toolbar && collapseToolbarBtn) {\n    if (window.innerWidth >= 768) {\n      // On larger screens, always expand toolbar\n      toolbar.classList.remove(\"toolbar-collapsed\");\n    } else if (!toolbar.classList.contains(\"toolbar-collapsed\")) {\n      // On smaller screens, collapse by default if not already collapsed\n      toolbar.classList.add(\"toolbar-collapsed\");\n      collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n    }\n  }\n});\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$5qD1E","$2UrZ2","$e8aKe","$ftuQo","$c33e153c3b84c13d$var$cyContainer","document","getElementById","$c33e153c3b84c13d$var$infoPanel","$c33e153c3b84c13d$var$walksPanel","$c33e153c3b84c13d$var$maximizeButton","$c33e153c3b84c13d$var$isMaximized","addEventListener","style","width","height","display","console","warn","$c33e153c3b84c13d$var$hiddenLabelBtn","nodelabelStyle","getLabelsVisible","ele","data","edgeLabelStyle","STATE","cy","selector","label","update","setLabelsVisible","$c33e153c3b84c13d$var$captureGraphBtn","$c33e153c3b84c13d$var$exportGraph","format","options","filename","scale","fullGraph","transparentBg","timestamp","Date","toISOString","slice","replace","png","full","bg","jpg","quality","blob","Blob","svg","type","URL","createObjectURL","jsonBlob","JSON","stringify","json","downloadLink","createElement","href","download","click","setTimeout","revokeObjectURL","$c33e153c3b84c13d$var$showExportDialog","window","showAlert","modal","$c33e153c3b84c13d$var$createExportModal","className","setAttribute","innerHTML","textContent","head","appendChild","body","bsModal","bootstrap","Modal","show","$c33e153c3b84c13d$var$setupExportHandlers","formatOptions","querySelectorAll","forEach","option","o","classList","remove","add","$c33e153c3b84c13d$var$updateExportOptions","scaleOptions","querySelector","exportOptions","dataset","scaleSlider","scaleValue","e","target","value","exportBtn","replaceWith","cloneNode","newExportBtn","activeFormat","parseFloat","checked","hide","toUpperCase","error","message","$c33e153c3b84c13d$var$redirectToIgvBtn","open","resizePanels","$c33e153c3b84c13d$var$uploadInput","event","file","files","log","loadingId","now","loadingIndicator","name","overlay","reader","FileReader","onload","content","result","fileExtension","split","pop","toLowerCase","updateMessage","jsonData","parse","loadGraphDataFromServer","graph_jsons","parse_tsgFile","length","graphCount","$c33e153c3b84c13d$var$setupGraphSelector","graphSelect","graphSelectorContainer","i","selectedIndex","parseInt","onerror","readAsText","$c33e153c3b84c13d$var$clearHighlightsBtn","clearNodeHighlights","$c33e153c3b84c13d$var$geneAnnotationBtn","$c33e153c3b84c13d$var$handleGeneAnnotation","loaded","loadGeneData","nodeCount","nodes","annotatedCount","annotateAllNodes","updateProgress","ctrlKey","preventDefault","parentElement","fileInput","handleAuroraIdsFileUpload","collapseToolbarBtn","toolbar","innerWidth","toggle","contains"],"version":3,"file":"app.bbdce570.js.map"}