{"mappings":"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","sources":["<anon>","src/scripts/eventHandlers.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequireaed0\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequireaed0\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $5qD1E = parcelRequire(\"5qD1E\");\n\nvar $2UrZ2 = parcelRequire(\"2UrZ2\");\n\nvar $e8aKe = parcelRequire(\"e8aKe\");\n\nvar $ftuQo = parcelRequire(\"ftuQo\");\n// Get references to the cy, info, and walks elements\nconst $c33e153c3b84c13d$var$cyContainer = document.getElementById(\"cy\");\nconst $c33e153c3b84c13d$var$infoPanel = document.getElementById(\"info\");\nconst $c33e153c3b84c13d$var$walksPanel = document.getElementById(\"walks\");\n// Get references to the maximize button and set initial state\nconst $c33e153c3b84c13d$var$maximizeButton = document.getElementById(\"toggleMaximize\");\nlet $c33e153c3b84c13d$var$isMaximized = false;\n// Add click event listener to the maximize button only if it exists\nif ($c33e153c3b84c13d$var$maximizeButton) $c33e153c3b84c13d$var$maximizeButton.addEventListener(\"click\", ()=>{\n    if ($c33e153c3b84c13d$var$isMaximized) {\n        // Restore previous layout\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$isMaximized = false;\n    } else {\n        // Maximize cy panel\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"100%\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"100vh\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$isMaximized = true;\n    }\n});\nelse console.warn(\"Element with ID 'toggleMaximize' not found in the DOM\");\nfunction $c33e153c3b84c13d$var$toggleLabels() {\n    // Update labelsVisible state\n    const nodelabelStyle = !(0, $e8aKe.getLabelsVisible)() ? function(ele) {\n        return ele.data(\"gene_name\") ? ele.data(\"gene_name\") : \"\";\n    } : \"\";\n    const edgeLabelStyle = !(0, $e8aKe.getLabelsVisible)() ? function(ele) {\n        return ele.data(\"weight\") ? ele.data(\"weight\") : \"\";\n    } : \"\";\n    (0, $5qD1E.STATE).cy.style().selector(\"node\") // Select nodes\n    .style({\n        label: nodelabelStyle\n    }).selector(\"edge\") // Select edges\n    .style({\n        label: edgeLabelStyle\n    }).update(); // Important to update the style\n    (0, $e8aKe.setLabelsVisible)(!(0, $e8aKe.getLabelsVisible)());\n}\n// Add a null check before attaching the event listener\nconst $c33e153c3b84c13d$var$hiddenLabelBtn = document.getElementById(\"hiddenLabel\");\nif ($c33e153c3b84c13d$var$hiddenLabelBtn) $c33e153c3b84c13d$var$hiddenLabelBtn.addEventListener(\"click\", $c33e153c3b84c13d$var$toggleLabels);\nelse console.warn(\"Element with ID 'hiddenLabel' not found in the DOM\");\nconst $c33e153c3b84c13d$var$captureGraphBtn = document.getElementById(\"captureGraph\");\nif ($c33e153c3b84c13d$var$captureGraphBtn) $c33e153c3b84c13d$var$captureGraphBtn.addEventListener(\"click\", ()=>{\n    // Get the base64 representation of the graph\n    const base64Image = (0, $5qD1E.STATE).cy.png();\n    // Create a new anchor element to enable downloading\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = base64Image;\n    downloadLink.download = \"graph_capture.png\";\n    // Trigger the download\n    downloadLink.click();\n});\nelse console.warn(\"Element with ID 'captureGraph' not found in the DOM\");\nconst $c33e153c3b84c13d$var$redirectToIgvBtn = document.getElementById(\"redirectToIgv\");\nif ($c33e153c3b84c13d$var$redirectToIgvBtn) $c33e153c3b84c13d$var$redirectToIgvBtn.addEventListener(\"click\", ()=>{\n    window.open(\"igv.html\", \"_blank\");\n});\nelse console.warn(\"Element with ID 'redirectToIgv' not found in the DOM\");\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    (0, $2UrZ2.resizePanels)();\n});\nconst $c33e153c3b84c13d$var$uploadInput = document.getElementById(\"uploadInput\");\nif ($c33e153c3b84c13d$var$uploadInput) $c33e153c3b84c13d$var$uploadInput.addEventListener(\"change\", $c33e153c3b84c13d$var$handleFileUpload);\nelse console.warn(\"Element with ID 'uploadInput' not found in the DOM\");\nfunction $c33e153c3b84c13d$var$handleFileUpload(event) {\n    const file = event.target.files[0];\n    console.log(file);\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = async (e)=>{\n        const content = e.target.result;\n        const fileExtension = file.name.split(\".\").pop().toLowerCase();\n        try {\n            if (fileExtension === \"json\") {\n                // Handle JSON file\n                const jsonData = JSON.parse(content);\n                console.log(\"Loaded JSON data:\", jsonData);\n                (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n                // Hide graph selector for single JSON files\n                document.getElementById(\"graphSelectorContainer\").style.display = \"none\";\n            } else if (fileExtension === \"tsg\") {\n                // Handle TSG file\n                console.log(\"Loaded TSG data\");\n                // wait for the result from promise\n                (0, $5qD1E.STATE).graph_jsons = await window.parse_tsgFile(content);\n                console.log(`Number of graph JSONs: ${(0, $5qD1E.STATE).graph_jsons.length}`);\n                // Show graph selector if multiple graphs are available\n                const graphCount = (0, $5qD1E.STATE).graph_jsons.length;\n                if (graphCount > 1) $c33e153c3b84c13d$var$setupGraphSelector(graphCount);\n                else document.getElementById(\"graphSelectorContainer\").style.display = \"none\";\n                // Load the first graph by default\n                const jsonData = JSON.parse((0, $5qD1E.STATE).graph_jsons[0]);\n                (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n            }\n        } catch (error) {\n            console.error(\"Error processing file:\", error);\n            window.showAlert?.(\"Error processing file: \" + error.message, \"error\") || alert(\"Error processing file: \" + error.message);\n        }\n    };\n    reader.readAsText(file);\n}\n/**\n * Sets up the graph selector dropdown with options based on the number of available graphs\n * @param {number} graphCount - The number of available graphs\n */ function $c33e153c3b84c13d$var$setupGraphSelector(graphCount) {\n    const graphSelect = document.getElementById(\"graphSelect\");\n    const graphSelectorContainer = document.getElementById(\"graphSelectorContainer\");\n    // Clear existing options\n    graphSelect.innerHTML = \"\";\n    // Add options for each graph\n    for(let i = 0; i < graphCount; i++){\n        const option = document.createElement(\"option\");\n        option.value = i;\n        option.textContent = `Graph ${i + 1}`;\n        graphSelect.appendChild(option);\n    }\n    // Show the selector\n    graphSelectorContainer.style.display = \"block\";\n    // Add event listener for graph selection\n    graphSelect.addEventListener(\"change\", function() {\n        const selectedIndex = parseInt(this.value);\n        if ((0, $5qD1E.STATE).graph_jsons && (0, $5qD1E.STATE).graph_jsons.length > selectedIndex) try {\n            // Parse and load the selected graph\n            const jsonData = JSON.parse((0, $5qD1E.STATE).graph_jsons[selectedIndex]);\n            (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n            window.showAlert(`Loaded graph ${selectedIndex + 1}`, \"success\", 2000);\n        } catch (error) {\n            console.error(\"Error loading selected graph:\", error);\n            window.showAlert(`Error loading graph ${selectedIndex + 1}: ${error.message}`, \"error\");\n        }\n    });\n}\n// Add the clear highlights button event handler\nconst $c33e153c3b84c13d$var$clearHighlightsBtn = document.getElementById(\"clearHighlights\");\nif ($c33e153c3b84c13d$var$clearHighlightsBtn) $c33e153c3b84c13d$var$clearHighlightsBtn.addEventListener(\"click\", ()=>{\n    (0, $5qD1E.clearNodeHighlights)((0, $5qD1E.STATE).cy);\n});\nelse console.warn(\"Element with ID 'clearHighlights' not found in the DOM\");\n// Gene annotation direct action (if modal doesn't work for some reason)\nconst $c33e153c3b84c13d$var$geneAnnotationBtn = document.getElementById(\"geneAnnotationBtn\");\nif ($c33e153c3b84c13d$var$geneAnnotationBtn) $c33e153c3b84c13d$var$geneAnnotationBtn.addEventListener(\"click\", async (e)=>{\n    // Direct annotation without modal\n    if (e.ctrlKey || !window.bootstrap) {\n        e.preventDefault();\n        await $c33e153c3b84c13d$var$handleGeneAnnotation();\n    } else // Bootstrap modal approach\n    try {\n        const modal = new bootstrap.Modal(document.getElementById(\"geneAnnotationModal\"));\n        modal.show();\n    } catch (error) {\n        console.error(\"Error showing modal, falling back to direct annotation:\", error);\n        await $c33e153c3b84c13d$var$handleGeneAnnotation();\n    }\n});\nelse console.warn(\"Element with ID 'geneAnnotationBtn' not found in the DOM\");\n/**\n * Handle direct gene annotation when modal is unavailable\n */ async function $c33e153c3b84c13d$var$handleGeneAnnotation() {\n    try {\n        console.log(\"Starting gene annotation process directly...\");\n        // Show loading alert - use the global function instead of imported one\n        window.showAlert(\"Loading gene annotations...\", \"info\");\n        // Try loading the gene data\n        const loaded = await (0, $ftuQo.loadGeneData)();\n        if (loaded && (0, $5qD1E.STATE).cy) {\n            console.log(\"Gene data loaded successfully, annotating nodes...\");\n            // Annotate all nodes in the graph\n            const annotatedCount = await (0, $ftuQo.annotateAllNodes)((0, $5qD1E.STATE).cy);\n            // Show success alert with auto-dismiss after 3 seconds - use global function\n            window.showAlert(`Annotated ${annotatedCount} nodes with gene information!`, \"success\", 3000);\n        } else {\n            console.error(\"Could not load gene data or graph not initialized\");\n            window.showAlert(\"Failed to load gene annotations.\", \"error\");\n        }\n    } catch (error) {\n        console.error(\"Error in gene annotation:\", error);\n        window.showAlert(\"Error in gene annotation process.\", \"error\");\n    }\n}\n// Add event handler for Aurora IDs file upload\ndocument.addEventListener(\"click\", (event)=>{\n    if (event.target.id === \"uploadAuroraIds\" || event.target.parentElement && event.target.parentElement.id === \"uploadAuroraIds\") {\n        const fileInput = document.getElementById(\"auroraIdsFile\");\n        if (fileInput && window.handleAuroraIdsFileUpload) window.handleAuroraIdsFileUpload();\n    }\n});\n// Make the Aurora ID file upload handler globally available\nif (typeof window !== \"undefined\" && typeof window.handleAuroraIdsFileUpload === \"undefined\" && typeof handleAuroraIdsFileUpload === \"function\") window.handleAuroraIdsFileUpload = handleAuroraIdsFileUpload;\n// Add event handler for toolbar collapse toggle on mobile devices\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n    const toolbar = document.querySelector(\".toolbar-responsive\");\n    if (collapseToolbarBtn && toolbar) {\n        // Default to collapsed state on small screens\n        if (window.innerWidth < 768) {\n            toolbar.classList.add(\"toolbar-collapsed\");\n            collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n        }\n        collapseToolbarBtn.addEventListener(\"click\", function() {\n            toolbar.classList.toggle(\"toolbar-collapsed\");\n            // Update the icon based on collapsed state\n            if (toolbar.classList.contains(\"toolbar-collapsed\")) collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n            else collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-up\"></i>';\n        });\n    }\n});\n// Also handle window resize events to maintain UI consistency\nwindow.addEventListener(\"resize\", function() {\n    const toolbar = document.querySelector(\".toolbar-responsive\");\n    const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n    if (toolbar && collapseToolbarBtn) {\n        if (window.innerWidth >= 768) // On larger screens, always expand toolbar\n        toolbar.classList.remove(\"toolbar-collapsed\");\n        else if (!toolbar.classList.contains(\"toolbar-collapsed\")) {\n            // On smaller screens, collapse by default if not already collapsed\n            toolbar.classList.add(\"toolbar-collapsed\");\n            collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n        }\n    }\n});\n\n\n//# sourceMappingURL=app.707b7d52.js.map\n","import { STATE, clearNodeHighlights } from \"./graph\";\nimport { resizePanels } from \"./graphUtilities\";\nimport { loadGraphDataFromServer } from \"./graph\";\nimport { getLabelsVisible, setLabelsVisible } from \"./graphSetup\";\nimport { loadGeneData, annotateAllNodes } from \"./geneAnnotation\";\n\n// Get references to the cy, info, and walks elements\nconst cyContainer = document.getElementById(\"cy\");\nconst infoPanel = document.getElementById(\"info\");\nconst walksPanel = document.getElementById(\"walks\");\n\n// Get references to the maximize button and set initial state\nconst maximizeButton = document.getElementById(\"toggleMaximize\");\nlet isMaximized = false;\n\n// Add click event listener to the maximize button only if it exists\nif (maximizeButton) {\n  maximizeButton.addEventListener(\"click\", () => {\n    if (isMaximized) {\n      // Restore previous layout\n      cyContainer.style.width = \"\";\n      cyContainer.style.height = \"\";\n      infoPanel.style.display = \"\";\n      walksPanel.style.display = \"\";\n      isMaximized = false;\n    } else {\n      // Maximize cy panel\n      cyContainer.style.width = \"100%\";\n      cyContainer.style.height = \"100vh\";\n      infoPanel.style.display = \"none\";\n      walksPanel.style.display = \"none\";\n      isMaximized = true;\n    }\n  });\n} else {\n  console.warn(\"Element with ID 'toggleMaximize' not found in the DOM\");\n}\n\nfunction toggleLabels() {\n  // Update labelsVisible state\n  const nodelabelStyle = !getLabelsVisible()\n    ? function (ele) {\n        return ele.data(\"gene_name\") ? ele.data(\"gene_name\") : \"\";\n      }\n    : \"\";\n  const edgeLabelStyle = !getLabelsVisible()\n    ? function (ele) {\n        return ele.data(\"weight\") ? ele.data(\"weight\") : \"\";\n      }\n    : \"\";\n\n  STATE.cy\n    .style()\n    .selector(\"node\") // Select nodes\n    .style({\n      label: nodelabelStyle,\n    })\n    .selector(\"edge\") // Select edges\n    .style({\n      label: edgeLabelStyle, // Toggles edge labels based on weight\n    })\n    .update(); // Important to update the style\n  setLabelsVisible(!getLabelsVisible());\n}\n\n// Add a null check before attaching the event listener\nconst hiddenLabelBtn = document.getElementById(\"hiddenLabel\");\nif (hiddenLabelBtn) {\n  hiddenLabelBtn.addEventListener(\"click\", toggleLabels);\n} else {\n  console.warn(\"Element with ID 'hiddenLabel' not found in the DOM\");\n}\n\nconst captureGraphBtn = document.getElementById(\"captureGraph\");\nif (captureGraphBtn) {\n  captureGraphBtn.addEventListener(\"click\", () => {\n    // Get the base64 representation of the graph\n    const base64Image = STATE.cy.png();\n\n    // Create a new anchor element to enable downloading\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = base64Image;\n    downloadLink.download = \"graph_capture.png\";\n\n    // Trigger the download\n    downloadLink.click();\n  });\n} else {\n  console.warn(\"Element with ID 'captureGraph' not found in the DOM\");\n}\n\nconst redirectToIgvBtn = document.getElementById(\"redirectToIgv\");\nif (redirectToIgvBtn) {\n  redirectToIgvBtn.addEventListener(\"click\", () => {\n    window.open(\"igv.html\", \"_blank\");\n  });\n} else {\n  console.warn(\"Element with ID 'redirectToIgv' not found in the DOM\");\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  resizePanels();\n});\n\nconst uploadInput = document.getElementById(\"uploadInput\");\nif (uploadInput) {\n  uploadInput.addEventListener(\"change\", handleFileUpload);\n} else {\n  console.warn(\"Element with ID 'uploadInput' not found in the DOM\");\n}\n\nfunction handleFileUpload(event) {\n  const file = event.target.files[0];\n  console.log(file);\n  if (!file) return;\n\n  const reader = new FileReader();\n\n  reader.onload = async (e) => {\n    const content = e.target.result;\n    const fileExtension = file.name.split(\".\").pop().toLowerCase();\n\n    try {\n      if (fileExtension === \"json\") {\n        // Handle JSON file\n        const jsonData = JSON.parse(content);\n        console.log(\"Loaded JSON data:\", jsonData);\n        loadGraphDataFromServer(jsonData);\n\n        // Hide graph selector for single JSON files\n        document.getElementById(\"graphSelectorContainer\").style.display =\n          \"none\";\n      } else if (fileExtension === \"tsg\") {\n        // Handle TSG file\n        console.log(\"Loaded TSG data\");\n        // wait for the result from promise\n        STATE.graph_jsons = await window.parse_tsgFile(content);\n        console.log(`Number of graph JSONs: ${STATE.graph_jsons.length}`);\n\n        // Show graph selector if multiple graphs are available\n        const graphCount = STATE.graph_jsons.length;\n        if (graphCount > 1) {\n          setupGraphSelector(graphCount);\n        } else {\n          document.getElementById(\"graphSelectorContainer\").style.display =\n            \"none\";\n        }\n\n        // Load the first graph by default\n        const jsonData = JSON.parse(STATE.graph_jsons[0]);\n        loadGraphDataFromServer(jsonData);\n      }\n    } catch (error) {\n      console.error(\"Error processing file:\", error);\n      window.showAlert?.(\"Error processing file: \" + error.message, \"error\") ||\n        alert(\"Error processing file: \" + error.message);\n    }\n  };\n  reader.readAsText(file);\n}\n\n/**\n * Sets up the graph selector dropdown with options based on the number of available graphs\n * @param {number} graphCount - The number of available graphs\n */\nfunction setupGraphSelector(graphCount) {\n  const graphSelect = document.getElementById(\"graphSelect\");\n  const graphSelectorContainer = document.getElementById(\n    \"graphSelectorContainer\"\n  );\n\n  // Clear existing options\n  graphSelect.innerHTML = \"\";\n\n  // Add options for each graph\n  for (let i = 0; i < graphCount; i++) {\n    const option = document.createElement(\"option\");\n    option.value = i;\n    option.textContent = `Graph ${i + 1}`;\n    graphSelect.appendChild(option);\n  }\n\n  // Show the selector\n  graphSelectorContainer.style.display = \"block\";\n\n  // Add event listener for graph selection\n  graphSelect.addEventListener(\"change\", function () {\n    const selectedIndex = parseInt(this.value);\n    if (STATE.graph_jsons && STATE.graph_jsons.length > selectedIndex) {\n      try {\n        // Parse and load the selected graph\n        const jsonData = JSON.parse(STATE.graph_jsons[selectedIndex]);\n        loadGraphDataFromServer(jsonData);\n        window.showAlert(`Loaded graph ${selectedIndex + 1}`, \"success\", 2000);\n      } catch (error) {\n        console.error(\"Error loading selected graph:\", error);\n        window.showAlert(\n          `Error loading graph ${selectedIndex + 1}: ${error.message}`,\n          \"error\"\n        );\n      }\n    }\n  });\n}\n\n// Add the clear highlights button event handler\nconst clearHighlightsBtn = document.getElementById(\"clearHighlights\");\nif (clearHighlightsBtn) {\n  clearHighlightsBtn.addEventListener(\"click\", () => {\n    clearNodeHighlights(STATE.cy);\n  });\n} else {\n  console.warn(\"Element with ID 'clearHighlights' not found in the DOM\");\n}\n\n// Gene annotation direct action (if modal doesn't work for some reason)\nconst geneAnnotationBtn = document.getElementById(\"geneAnnotationBtn\");\nif (geneAnnotationBtn) {\n  geneAnnotationBtn.addEventListener(\"click\", async (e) => {\n    // Direct annotation without modal\n    if (e.ctrlKey || !window.bootstrap) {\n      e.preventDefault();\n      await handleGeneAnnotation();\n    } else {\n      // Bootstrap modal approach\n      try {\n        const modal = new bootstrap.Modal(\n          document.getElementById(\"geneAnnotationModal\")\n        );\n        modal.show();\n      } catch (error) {\n        console.error(\n          \"Error showing modal, falling back to direct annotation:\",\n          error\n        );\n        await handleGeneAnnotation();\n      }\n    }\n  });\n} else {\n  console.warn(\"Element with ID 'geneAnnotationBtn' not found in the DOM\");\n}\n\n/**\n * Handle direct gene annotation when modal is unavailable\n */\nasync function handleGeneAnnotation() {\n  try {\n    console.log(\"Starting gene annotation process directly...\");\n\n    // Show loading alert - use the global function instead of imported one\n    window.showAlert(\"Loading gene annotations...\", \"info\");\n\n    // Try loading the gene data\n    const loaded = await loadGeneData();\n\n    if (loaded && STATE.cy) {\n      console.log(\"Gene data loaded successfully, annotating nodes...\");\n      // Annotate all nodes in the graph\n      const annotatedCount = await annotateAllNodes(STATE.cy);\n\n      // Show success alert with auto-dismiss after 3 seconds - use global function\n      window.showAlert(\n        `Annotated ${annotatedCount} nodes with gene information!`,\n        \"success\",\n        3000\n      );\n    } else {\n      console.error(\"Could not load gene data or graph not initialized\");\n      window.showAlert(\"Failed to load gene annotations.\", \"error\");\n    }\n  } catch (error) {\n    console.error(\"Error in gene annotation:\", error);\n    window.showAlert(\"Error in gene annotation process.\", \"error\");\n  }\n}\n\n// Add event handler for Aurora IDs file upload\ndocument.addEventListener(\"click\", (event) => {\n  if (\n    event.target.id === \"uploadAuroraIds\" ||\n    (event.target.parentElement &&\n      event.target.parentElement.id === \"uploadAuroraIds\")\n  ) {\n    const fileInput = document.getElementById(\"auroraIdsFile\");\n    if (fileInput && window.handleAuroraIdsFileUpload) {\n      window.handleAuroraIdsFileUpload();\n    }\n  }\n});\n\n// Make the Aurora ID file upload handler globally available\nif (\n  typeof window !== \"undefined\" &&\n  typeof window.handleAuroraIdsFileUpload === \"undefined\" &&\n  typeof handleAuroraIdsFileUpload === \"function\"\n) {\n  window.handleAuroraIdsFileUpload = handleAuroraIdsFileUpload;\n}\n\n// Add event handler for toolbar collapse toggle on mobile devices\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n  const toolbar = document.querySelector(\".toolbar-responsive\");\n\n  if (collapseToolbarBtn && toolbar) {\n    // Default to collapsed state on small screens\n    if (window.innerWidth < 768) {\n      toolbar.classList.add(\"toolbar-collapsed\");\n      collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n    }\n\n    collapseToolbarBtn.addEventListener(\"click\", function () {\n      toolbar.classList.toggle(\"toolbar-collapsed\");\n\n      // Update the icon based on collapsed state\n      if (toolbar.classList.contains(\"toolbar-collapsed\")) {\n        collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n      } else {\n        collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-up\"></i>';\n      }\n    });\n  }\n});\n\n// Also handle window resize events to maintain UI consistency\nwindow.addEventListener(\"resize\", function () {\n  const toolbar = document.querySelector(\".toolbar-responsive\");\n  const collapseToolbarBtn = document.getElementById(\"collapseToolbarBtn\");\n\n  if (toolbar && collapseToolbarBtn) {\n    if (window.innerWidth >= 768) {\n      // On larger screens, always expand toolbar\n      toolbar.classList.remove(\"toolbar-collapsed\");\n    } else if (!toolbar.classList.contains(\"toolbar-collapsed\")) {\n      // On smaller screens, collapse by default if not already collapsed\n      toolbar.classList.add(\"toolbar-collapsed\");\n      collapseToolbarBtn.innerHTML = '<i class=\"bi bi-chevron-down\"></i>';\n    }\n  }\n});\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$5qD1E","$2UrZ2","$e8aKe","$ftuQo","$c33e153c3b84c13d$var$cyContainer","document","getElementById","$c33e153c3b84c13d$var$infoPanel","$c33e153c3b84c13d$var$walksPanel","$c33e153c3b84c13d$var$maximizeButton","$c33e153c3b84c13d$var$isMaximized","addEventListener","style","width","height","display","console","warn","$c33e153c3b84c13d$var$hiddenLabelBtn","nodelabelStyle","getLabelsVisible","ele","data","edgeLabelStyle","STATE","cy","selector","label","update","setLabelsVisible","$c33e153c3b84c13d$var$captureGraphBtn","base64Image","png","downloadLink","createElement","href","download","click","$c33e153c3b84c13d$var$redirectToIgvBtn","window","open","resizePanels","$c33e153c3b84c13d$var$uploadInput","event","file","target","files","log","reader","FileReader","onload","e","content","result","fileExtension","name","split","pop","toLowerCase","jsonData","JSON","parse","loadGraphDataFromServer","graph_jsons","parse_tsgFile","length","graphCount","$c33e153c3b84c13d$var$setupGraphSelector","graphSelect","graphSelectorContainer","innerHTML","i","option","value","textContent","appendChild","selectedIndex","parseInt","showAlert","error","message","alert","readAsText","$c33e153c3b84c13d$var$clearHighlightsBtn","clearNodeHighlights","$c33e153c3b84c13d$var$geneAnnotationBtn","$c33e153c3b84c13d$var$handleGeneAnnotation","loaded","loadGeneData","annotatedCount","annotateAllNodes","ctrlKey","bootstrap","preventDefault","modal","Modal","show","parentElement","fileInput","handleAuroraIdsFileUpload","collapseToolbarBtn","toolbar","querySelector","innerWidth","classList","add","toggle","contains","remove"],"version":3,"file":"app.707b7d52.js.map"}