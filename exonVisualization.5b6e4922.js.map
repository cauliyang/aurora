{"mappings":"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","sources":["<anon>","src/scripts/exonVisualization.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequireaed0\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"iNwrO\", function(module, exports) {\n\n$parcel$export(module.exports, \"showExonVisualizationModal\", () => $daf5f90896ab6e03$export$e2ca29b1398b1240);\n// exonVisualization.js\n// D3.js-based visualization of exon-intron structures\n// Function to create and display an exon-intron structure visualization\nfunction $daf5f90896ab6e03$export$68b4ed73db160412(exonsStr, containerElement, chromosomeInfo = null) {\n    if (!exonsStr || typeof exonsStr !== 'string') {\n        containerElement.innerHTML = '<div class=\"alert alert-warning\">No exon information available</div>';\n        return;\n    }\n    try {\n        // Parse the exons string which is in format like \"[start-end,start-end]\"\n        const exonList = exonsStr.replace(/^\\[|\\]$/g, \"\").split(\",\");\n        if (exonList.length === 0) {\n            containerElement.innerHTML = '<div class=\"alert alert-warning\">No exons found</div>';\n            return;\n        }\n        // Get exon coordinates\n        const exons = exonList.map((exon)=>{\n            const [start, end] = exon.split(\"-\").map(Number);\n            return {\n                start: start,\n                end: end,\n                length: end - start + 1\n            };\n        });\n        // Sort exons by start position\n        exons.sort((a, b)=>a.start - b.start);\n        // Clear container first\n        containerElement.innerHTML = '';\n        // Create a simple container div for the visualization\n        const visualizationContainer = document.createElement('div');\n        visualizationContainer.className = 'exon-visualization-container';\n        visualizationContainer.style.width = '100%';\n        visualizationContainer.style.height = '300px';\n        visualizationContainer.style.position = 'relative';\n        containerElement.appendChild(visualizationContainer);\n        // Now that we have the proper structure, load D3\n        if (!window.d3) $daf5f90896ab6e03$var$loadD3().then(()=>$daf5f90896ab6e03$var$renderExonVisualization(exons, visualizationContainer, containerElement, chromosomeInfo));\n        else $daf5f90896ab6e03$var$renderExonVisualization(exons, visualizationContainer, containerElement, chromosomeInfo);\n    } catch (e) {\n        console.error(\"Error parsing exons:\", e);\n        containerElement.innerHTML = `<div class=\"alert alert-warning\">Could not parse exon information: ${exonsStr}</div>`;\n    }\n}\n// Function to dynamically load D3.js\nfunction $daf5f90896ab6e03$var$loadD3() {\n    return new Promise((resolve, reject)=>{\n        if (window.d3) {\n            resolve();\n            return;\n        }\n        const script = document.createElement('script');\n        script.src = 'https://d3js.org/d3.v7.min.js';\n        script.onload = ()=>resolve();\n        script.onerror = (err)=>reject(err);\n        document.head.appendChild(script);\n    });\n}\n// Function to render the exon-intron structure visualization using D3\nfunction $daf5f90896ab6e03$var$renderExonVisualization(exons, containerElement, parentContainer, chromosomeInfo = null) {\n    // Calculate genomic range for scaling\n    const minPos = Math.min(...exons.map((e)=>e.start));\n    const maxPos = Math.max(...exons.map((e)=>e.end));\n    const totalLength = maxPos - minPos + 1;\n    // Set up dimensions - use the full width of the container\n    const margin = {\n        top: 45,\n        right: 30,\n        bottom: 50,\n        left: 60\n    }; // Increased top margin for chromosome info\n    const width = containerElement.clientWidth - margin.left - margin.right;\n    const height = 180; // Increased height for better visualization\n    // Create SVG container\n    const svg = d3.select(containerElement).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).attr('class', 'exon-svg').append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    // Add the combined header text in one line\n    if (chromosomeInfo) svg.append('text').attr('x', width / 2).attr('y', -5).attr('text-anchor', 'middle').attr('class', 'chromosome-info text-header').text(`Total Exons: ${exons.length} | Chromosome ${chromosomeInfo.chrom}${chromosomeInfo.strand ? `, Strand: ${chromosomeInfo.strand}` : ''}`);\n    else // If no chromosome info, just show exon count\n    svg.append('text').attr('x', width / 2).attr('y', -5).attr('text-anchor', 'middle').attr('class', 'text-header').style('font-size', '14px').style('fill', '#666').text(`Total Exons: ${exons.length}`);\n    const defs = svg.append('defs');\n    // Create a scale for genomic positions\n    const xScale = d3.scaleLinear().domain([\n        minPos,\n        maxPos\n    ]).range([\n        0,\n        width\n    ]);\n    // Create axis\n    const xAxis = d3.axisBottom(xScale).tickFormat((d)=>d.toLocaleString()).ticks(Math.min(10, width / 100)); // Responsive number of ticks\n    // Add genomic position axis with grid lines\n    const xAxisGroup = svg.append('g').attr('class', 'x-axis').attr('transform', `translate(0,${height - 10})`).call(xAxis);\n    // Style the axis\n    xAxisGroup.selectAll('text').style('font-size', '10px').style('font-weight', 'bold');\n    xAxisGroup.selectAll('line').style('stroke', '#ccc');\n    xAxisGroup.selectAll('path').style('stroke', '#ccc').style('stroke-width', '2px');\n    // Add axis label\n    svg.append('text').attr('x', width / 2).attr('y', height + margin.bottom - 10).style('text-anchor', 'middle').style('font-size', '12px').style('font-weight', 'bold').text('Genomic Position');\n    // Add vertical grid lines\n    svg.append('g').attr('class', 'grid-lines').selectAll('line').data(xScale.ticks(10)).enter().append('line').attr('x1', (d)=>xScale(d)).attr('y1', 0).attr('x2', (d)=>xScale(d)).attr('y2', height - 10).attr('stroke', '#eee').attr('stroke-width', 1);\n    // Calculate total exon and intron length\n    const totalExonLength = exons.reduce((sum, e)=>sum + e.length, 0);\n    const totalIntronLength = totalLength - totalExonLength;\n    // Calculate introns between consecutive exons\n    const introns = [];\n    for(let i = 0; i < exons.length - 1; i++)if (exons[i].end < exons[i + 1].start) introns.push({\n        start: exons[i].end + 1,\n        end: exons[i + 1].start - 1,\n        length: exons[i + 1].start - exons[i].end - 1,\n        index: i\n    });\n    // Draw connecting line through the entire transcript\n    svg.append('line').attr('x1', xScale(minPos)).attr('y1', height / 2).attr('x2', xScale(maxPos)).attr('y2', height / 2).attr('stroke', '#ccc').attr('stroke-width', 3);\n    // Create pattern for introns\n    const pattern = defs.append('pattern').attr('id', 'intron-pattern').attr('patternUnits', 'userSpaceOnUse').attr('width', 6).attr('height', 6);\n    pattern.append('path').attr('d', 'M-1,1 l2,-2 M0,6 l6,-6 M5,7 l2,-2').attr('stroke', '#999').attr('stroke-width', 1);\n    // Draw introns with animation\n    const intronLines = svg.selectAll('.intron').data(introns).enter().append('line').attr('class', 'intron').attr('x1', (d)=>xScale(d.start)).attr('y1', height / 2).attr('x2', (d)=>xScale(d.start)) // Start from the same point for animation\n    .attr('y2', height / 2).attr('stroke', '#999').attr('stroke-width', 3).attr('stroke-dasharray', '5,5');\n    // Animate introns drawing\n    intronLines.transition().duration(1000).delay((d, i)=>i * 100).attr('x2', (d)=>xScale(d.end));\n    // Define color schemes for exons\n    const colorSchemes = [\n        d3.interpolateBlues,\n        d3.interpolateGreens,\n        d3.interpolateOranges,\n        d3.interpolatePurples\n    ];\n    // Use a consistent color scheme based on exon count\n    const colorScheme = colorSchemes[exons.length % colorSchemes.length];\n    const colorScale = d3.scaleSequential().domain([\n        0,\n        exons.length - 1\n    ]).interpolator(colorScheme);\n    // Create a group for each exon to hold both rectangle and label\n    const exonGroups = svg.selectAll('.exon-group').data(exons).enter().append('g').attr('class', 'exon-group').attr('transform', (d)=>`translate(${xScale(d.start)}, ${height / 2 - 20})`);\n    // Draw exons (thick rectangles) with animation\n    const exonHeight = 40; // Taller for better visibility\n    const exonRects = exonGroups.append('rect').attr('class', 'exon').attr('x', 0).attr('y', 0).attr('width', 0) // Start with 0 width for animation\n    .attr('height', 0) // Start with 0 height for animation\n    .attr('fill', (d, i)=>colorScale(i)).attr('stroke', '#333').attr('stroke-width', 2).attr('rx', 6) // Rounded corners\n    .attr('ry', 6);\n    // Animation for exons growing\n    exonRects.transition().duration(800).delay((d, i)=>i * 100).attr('height', exonHeight).transition().duration(400).attr('width', (d)=>Math.max(6, xScale(d.end) - xScale(d.start))); // Ensure minimum width\n    // Add exon number labels\n    const exonLabels = exonGroups.append('text').attr('class', 'exon-label').attr('x', (d)=>Math.max(3, (xScale(d.end) - xScale(d.start)) / 2)) // Center in the exon\n    .attr('y', exonHeight / 2 + 5) // Center vertically\n    .attr('text-anchor', 'middle').attr('fill', 'white').attr('font-weight', 'bold').attr('font-size', '12px').attr('pointer-events', 'none') // Prevent label from interfering with mouse events\n    .style('opacity', 0) // Hidden by default\n    .text((d, i)=>i + 1);\n    // Remove animation for labels appearing since they'll be hidden by default\n    // Add mouse interactions for exons\n    exonGroups.on('mouseover', function(event, d) {\n        const index = exons.indexOf(d);\n        // Highlight exon on hover\n        d3.select(this).select('rect').transition().duration(150).attr('stroke-width', 2).attr('stroke', '#ff7f0e');\n        // Show the exon label\n        d3.select(this).select('.exon-label').transition().duration(150).style('opacity', 1);\n        // Show tooltip with exon information\n        const tooltip = d3.select('#tooltip');\n        if (tooltip.empty()) {\n            console.warn('Tooltip element not found');\n            return;\n        }\n        tooltip.transition().duration(200).style('opacity', 1);\n        tooltip.html(`\n                <div class=\"exon-tooltip\">\n                    <h6 class=\"mb-1\">Exon ${index + 1}</h6>\n                    <p class=\"mb-1\"><strong>Position:</strong> ${d.start.toLocaleString()}-${d.end.toLocaleString()}</p>\n                    <p class=\"mb-1\"><strong>Length:</strong> ${d.length.toLocaleString()} bp</p>\n                    <p class=\"mb-0\"><strong>% of Transcript:</strong> ${(d.length / totalLength * 100).toFixed(2)}%</p>\n                </div>\n            `).style('left', `${event.pageX + 10}px`).style('top', `${event.pageY - 10}px`);\n    }).on('mouseout', function() {\n        // Reset on mouseout\n        d3.select(this).select('rect').transition().duration(150).attr('stroke-width', 1).attr('stroke', '#333');\n        // Hide the exon label\n        d3.select(this).select('.exon-label').transition().duration(150).style('opacity', 0);\n        // Hide tooltip\n        const tooltip = d3.select('#tooltip');\n        if (!tooltip.empty()) tooltip.transition().duration(200).style('opacity', 0);\n    }).on('click', function(event, d) {\n        // Construct coordinate string\n        let coordString;\n        if (chromosomeInfo && chromosomeInfo.chrom) coordString = `${chromosomeInfo.chrom}:${d.start.toLocaleString()}-${d.end.toLocaleString()}`;\n        else coordString = `${d.start.toLocaleString()}-${d.end.toLocaleString()}`;\n        // Copy to clipboard\n        if (navigator.clipboard) navigator.clipboard.writeText(coordString).then(()=>{\n            $daf5f90896ab6e03$var$showExportNotification('success', `Copied: ${coordString}`);\n        }, ()=>{\n            $daf5f90896ab6e03$var$showExportNotification('error', 'Failed to copy coordinate');\n        });\n        else {\n            // Fallback for older browsers\n            const textarea = document.createElement('textarea');\n            textarea.value = coordString;\n            document.body.appendChild(textarea);\n            textarea.select();\n            try {\n                document.execCommand('copy');\n                $daf5f90896ab6e03$var$showExportNotification('success', `Copied: ${coordString}`);\n            } catch (err) {\n                $daf5f90896ab6e03$var$showExportNotification('error', 'Failed to copy coordinate');\n            }\n            document.body.removeChild(textarea);\n        }\n    });\n    // Make responsive\n    function resizeVisualization() {\n        // Only adjust width if the container width changes significantly\n        if (Math.abs(parentContainer.clientWidth - width) > 20) {\n            // Recalculate width\n            const newWidth = containerElement.clientWidth - margin.left - margin.right;\n            // Update SVG width\n            d3.select(containerElement).select('svg').attr('width', newWidth + margin.left + margin.right);\n            // Update scales\n            xScale.range([\n                0,\n                newWidth\n            ]);\n            // Update all elements\n            svg.select('.x-axis').call(xAxis.ticks(Math.min(10, newWidth / 100)));\n            // Update exon groups and their contents\n            exonGroups.attr('transform', (d)=>`translate(${xScale(d.start)}, ${height / 2 - 20})`);\n            exonGroups.select('rect').attr('width', (d)=>Math.max(6, xScale(d.end) - xScale(d.start)));\n            exonGroups.select('text').attr('x', (d)=>Math.max(3, (xScale(d.end) - xScale(d.start)) / 2));\n            // Update intron lines\n            svg.selectAll('.intron').attr('x1', (d)=>xScale(d.start)).attr('x2', (d)=>xScale(d.end));\n            // Update text elements\n            svg.selectAll('.text-header').attr('x', newWidth / 2);\n        }\n    }\n    // Add resize listener\n    const resizeObserver = new ResizeObserver(()=>{\n        resizeVisualization();\n    });\n    resizeObserver.observe(parentContainer);\n    // Return info about the visualization\n    return {\n        exonCount: exons.length,\n        intronCount: introns.length,\n        totalLength: totalLength,\n        exonLength: totalExonLength,\n        intronLength: totalIntronLength\n    };\n}\nfunction $daf5f90896ab6e03$export$e2ca29b1398b1240(exonsStr, title = \"Node Structure\", chromosomeInfo = null) {\n    // Create modal if it doesn't exist\n    let modal = document.getElementById('exonVisualizationModal');\n    // Create tooltip container if it doesn't exist\n    if (!document.getElementById('tooltip')) {\n        const tooltip = document.createElement('div');\n        tooltip.id = 'tooltip';\n        tooltip.className = 'exon-tooltip-container';\n        tooltip.style.position = 'absolute';\n        tooltip.style.opacity = '0';\n        tooltip.style.pointerEvents = 'none';\n        tooltip.style.zIndex = '1000';\n        document.body.appendChild(tooltip);\n    }\n    if (!modal) {\n        modal = document.createElement('div');\n        modal.id = 'exonVisualizationModal';\n        modal.className = 'modal fade';\n        modal.tabIndex = '-1';\n        modal.innerHTML = `\n      <div class=\"modal-dialog modal-xl\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"exonVisualizationModalLabel\">${title}</h5>\n            <div class=\"ms-auto\">\n              <button type=\"button\" id=\"exportExonSvgBtn\" class=\"btn btn-sm btn-outline-success me-2\" title=\"Export as SVG\">\n                <i class=\"bi bi-download me-1\"></i> Export SVG\n              </button>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n          </div>\n          <div class=\"modal-body p-0\">\n            <div id=\"exonVisualizationContainer\" class=\"exon-container\"></div>\n            <div id=\"exonStatsContainer\" class=\"mt-3 px-3 pb-3\"></div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n          </div>\n        </div>\n      </div>\n    `;\n        document.body.appendChild(modal);\n        // Add styles for the modal and visualization\n        if (!document.getElementById('exon-visualization-styles')) {\n            const style = document.createElement('style');\n            style.id = 'exon-visualization-styles';\n            style.textContent = `\n                .modal-xl {\n                    max-width: 90%;\n                    width: 1200px;\n                }\n                .modal-body {\n                    overflow: hidden;\n                }\n                .exon-container {\n                    position: relative;\n                    height: 350px;\n                    width: 100%;\n                    background: #f9f9f9;\n                }\n                .exon-visualization-container {\n                    height: 100%;\n                    width: 100%;\n                    background: linear-gradient(to bottom, #ffffff, #f9f9f9);\n                }\n                .exon-tooltip {\n                    background-color: rgba(255, 255, 255, 0.95);\n                    border-radius: 5px;\n                    padding: 8px;\n                    box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n                    font-size: 14px;\n                    z-index: 1000;\n                }\n                .exon-tooltip h6 {\n                    border-bottom: 1px solid #eee;\n                    padding-bottom: 5px;\n                    margin-bottom: 5px;\n                    color: #333;\n                    font-size: 16px;\n                }\n                .exon-svg {\n                    background: linear-gradient(to bottom, #ffffff, #f9f9f9);\n                }\n                .stat-card {\n                    border-radius: 8px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n                    transition: transform 0.2s ease, box-shadow 0.2s ease;\n                }\n                .stat-card:hover {\n                    transform: translateY(-3px);\n                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n                }\n                .stat-value {\n                    font-size: 1.5rem;\n                    font-weight: bold;\n                }\n                .chromosome-info {\n                    font-size: 14px;\n                    color: #555;\n                    font-style: italic;\n                }\n                .text-header {\n                    font-size: 14px;\n                    margin-bottom: 5px;\n                }\n                .exon-label {\n                    dominant-baseline: middle;\n                    user-select: none;\n                    text-shadow: 0px 1px 2px rgba(0,0,0,0.7);\n                    font-size: 13px;\n                    letter-spacing: 0.5px;\n                }\n                .exon-group {\n                    cursor: pointer;\n                }\n                .exon-group:hover .exon {\n                    filter: brightness(110%);\n                }\n                .exon-group:hover .exon-label {\n                    font-weight: bolder;\n                    text-shadow: 0px 1px 3px rgba(0,0,0,0.9);\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    } else // Update the modal title\n    document.getElementById('exonVisualizationModalLabel').textContent = title;\n    // Create Bootstrap modal instance\n    const modalInstance = new bootstrap.Modal(modal);\n    // When modal is shown, render the visualization\n    modal.addEventListener('shown.bs.modal', ()=>{\n        const container = document.getElementById('exonVisualizationContainer');\n        const statsContainer = document.getElementById('exonStatsContainer');\n        // Create the visualization\n        const result = $daf5f90896ab6e03$export$68b4ed73db160412(exonsStr, container, chromosomeInfo);\n        // Setup SVG export button\n        const exportSvgBtn = document.getElementById('exportExonSvgBtn');\n        if (exportSvgBtn) exportSvgBtn.addEventListener('click', ()=>{\n            const filenameBase = chromosomeInfo ? `exon_structure_chr${chromosomeInfo.chrom}_${new Date().toISOString().slice(0, 10)}` : `exon_structure_${new Date().toISOString().slice(0, 10)}`;\n            $daf5f90896ab6e03$var$exportVisualizationToSvg(container, filenameBase);\n        });\n        // If visualization was successful, show enhanced stats\n        if (result) {\n            const exonPercent = (result.exonLength / result.totalLength * 100).toFixed(1);\n            const intronPercent = (result.intronLength / result.totalLength * 100).toFixed(1);\n            statsContainer.innerHTML = `\n        <div class=\"card border-0 shadow-sm\">\n          <div class=\"card-header bg-light\">\n            <h6 class=\"mb-0 fw-bold\">Transcript Structure Statistics</h6>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"row g-3\">\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-primary bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-box me-1\"></i>\n                      <h6 class=\"mb-0\">Exons</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.exonCount}</div>\n                      <div class=\"text-muted small\">\n                        ${result.exonLength.toLocaleString()} bp (${exonPercent}%)\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-secondary bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-dash-lg me-1\"></i>\n                      <h6 class=\"mb-0\">Introns</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.intronCount}</div>\n                      <div class=\"text-muted small\">\n                        ${result.intronLength.toLocaleString()} bp (${intronPercent}%)\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-info bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-rulers me-1\"></i>\n                      <h6 class=\"mb-0\">Total Length</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.totalLength.toLocaleString()}</div>\n                      <div class=\"text-muted small\">\n                        base pairs\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              ${chromosomeInfo ? `\n              <div class=\"col-12 mt-3\">\n                <div class=\"alert alert-info mb-0\">\n                  <i class=\"bi bi-info-circle me-2\"></i>\n                  <strong>Chromosome Location:</strong>\n                  Chr${chromosomeInfo.chrom}${chromosomeInfo.strand ? `, Strand: ${chromosomeInfo.strand}` : ''}\n                  (${chromosomeInfo.start?.toLocaleString() || ''}-${chromosomeInfo.end?.toLocaleString() || ''})\n                </div>\n              </div>\n              ` : ''}\n            </div>\n          </div>\n        </div>\n      `;\n        }\n    });\n    // Show the modal\n    modalInstance.show();\n}\n// Function to export the visualization as an SVG file\nfunction $daf5f90896ab6e03$var$exportVisualizationToSvg(container, filename) {\n    // Get the SVG element from the container\n    const svgElement = container.querySelector('svg');\n    if (!svgElement) {\n        console.error('No SVG element found in container');\n        // Show error notification\n        $daf5f90896ab6e03$var$showExportNotification('error', 'Failed to export SVG: No visualization found');\n        return;\n    }\n    try {\n        // Get SVG data with inline styles\n        const svgData = $daf5f90896ab6e03$var$getSVGData(svgElement);\n        // Create a blob from the SVG string\n        const blob = new Blob([\n            svgData\n        ], {\n            type: 'image/svg+xml;charset=utf-8'\n        });\n        // Create a download link\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `${filename}.svg`;\n        link.style.display = 'none';\n        // Add to body, click to trigger download, then remove\n        document.body.appendChild(link);\n        link.click();\n        // Cleanup\n        setTimeout(()=>{\n            document.body.removeChild(link);\n            URL.revokeObjectURL(link.href);\n            // Show success notification\n            $daf5f90896ab6e03$var$showExportNotification('success', 'SVG exported successfully!');\n        }, 100);\n    } catch (error) {\n        console.error('Error exporting SVG:', error);\n        $daf5f90896ab6e03$var$showExportNotification('error', `Failed to export SVG: ${error.message}`);\n    }\n}\n// Helper function to get SVG data with inline styles\nfunction $daf5f90896ab6e03$var$getSVGData(svgElement) {\n    // Clone the SVG to avoid modifying the original\n    const svgClone = svgElement.cloneNode(true);\n    // Set the background color for the exported SVG\n    svgClone.style.background = 'white';\n    // Add required namespaces\n    svgClone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgClone.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n    // Create a style element to hold all the CSS rules\n    const styleElement = document.createElementNS('http://www.w3.org/2000/svg', 'style');\n    styleElement.textContent = $daf5f90896ab6e03$var$getRelevantStyles();\n    svgClone.insertBefore(styleElement, svgClone.firstChild);\n    // Convert SVG to string\n    return new XMLSerializer().serializeToString(svgClone);\n}\n// Helper function to extract relevant CSS styles for the SVG\nfunction $daf5f90896ab6e03$var$getRelevantStyles() {\n    // Get all style sheets on the page\n    const styleSheets = document.styleSheets;\n    let cssText = '';\n    // List of selectors relevant to the SVG\n    const relevantSelectors = [\n        '.exon',\n        '.intron',\n        '.exon-svg',\n        'svg',\n        'rect',\n        'path',\n        'line',\n        'text',\n        'g',\n        'circle',\n        'polyline',\n        'polygon'\n    ];\n    try {\n        // Loop through all style sheets\n        for(let i = 0; i < styleSheets.length; i++){\n            const styleSheet = styleSheets[i];\n            try {\n                // Access the CSS rules\n                const rules = styleSheet.cssRules || styleSheet.rules;\n                if (!rules) continue;\n                // Loop through all CSS rules\n                for(let j = 0; j < rules.length; j++){\n                    const rule = rules[j];\n                    // Check if the selector is relevant for our SVG\n                    if (rule.selectorText && relevantSelectors.some((selector)=>rule.selectorText.includes(selector))) cssText += rule.cssText + '\\n';\n                }\n            } catch (e) {\n                // Some style sheets may not be accessible due to CORS restrictions\n                console.warn('Could not access stylesheet:', e);\n            }\n        }\n    } catch (e) {\n        console.warn('Error extracting styles:', e);\n    }\n    // Add some default styles to ensure proper rendering\n    cssText += `\n        .exon { fill-opacity: 1; stroke-width: 2px; }\n        .intron { stroke-dasharray: 5,5; }\n        text { font-family: Arial, sans-serif; }\n        .exon:hover { stroke: #ff7f0e; stroke-width: 2px; }\n    `;\n    return cssText;\n}\n// Function to show a notification for export result\nfunction $daf5f90896ab6e03$var$showExportNotification(type, message) {\n    // Remove any existing notification\n    const existingNotification = document.getElementById('exportNotification');\n    if (existingNotification) existingNotification.remove();\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.id = 'exportNotification';\n    notification.className = `export-notification ${type}`;\n    notification.innerHTML = `\n        <div class=\"d-flex align-items-center\">\n            <i class=\"bi ${type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle'} me-2\"></i>\n            <span>${message}</span>\n        </div>\n    `;\n    // Add styles if they don't exist\n    if (!document.getElementById('export-notification-styles')) {\n        const style = document.createElement('style');\n        style.id = 'export-notification-styles';\n        style.textContent = `\n            .export-notification {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                padding: 10px 20px;\n                border-radius: 4px;\n                color: white;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n                z-index: 9999;\n                animation: fadeInOut 3s forwards;\n            }\n            .export-notification.success {\n                background-color: #28a745;\n            }\n            .export-notification.error {\n                background-color: #dc3545;\n            }\n            @keyframes fadeInOut {\n                0% { opacity: 0; transform: translateY(20px); }\n                10% { opacity: 1; transform: translateY(0); }\n                80% { opacity: 1; transform: translateY(0); }\n                100% { opacity: 0; transform: translateY(-20px); }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n    // Add to document and remove after animation\n    document.body.appendChild(notification);\n    setTimeout(()=>{\n        if (notification.parentNode) notification.parentNode.removeChild(notification);\n    }, 3000);\n}\n\n});\n\n\n//# sourceMappingURL=exonVisualization.5b6e4922.js.map\n","// exonVisualization.js\n// D3.js-based visualization of exon-intron structures\n\n// Function to create and display an exon-intron structure visualization\nexport function createExonVisualization(exonsStr, containerElement, chromosomeInfo = null) {\n    if (!exonsStr || typeof exonsStr !== 'string') {\n        containerElement.innerHTML = '<div class=\"alert alert-warning\">No exon information available</div>';\n        return;\n    }\n\n    try {\n        // Parse the exons string which is in format like \"[start-end,start-end]\"\n        const exonList = exonsStr.replace(/^\\[|\\]$/g, \"\").split(\",\");\n\n        if (exonList.length === 0) {\n            containerElement.innerHTML = '<div class=\"alert alert-warning\">No exons found</div>';\n            return;\n        }\n\n        // Get exon coordinates\n        const exons = exonList.map(exon => {\n            const [start, end] = exon.split(\"-\").map(Number);\n            return { start, end, length: end - start + 1 };\n        });\n\n        // Sort exons by start position\n        exons.sort((a, b) => a.start - b.start);\n\n        // Clear container first\n        containerElement.innerHTML = '';\n\n        // Create a simple container div for the visualization\n        const visualizationContainer = document.createElement('div');\n        visualizationContainer.className = 'exon-visualization-container';\n        visualizationContainer.style.width = '100%';\n        visualizationContainer.style.height = '300px';\n        visualizationContainer.style.position = 'relative';\n        containerElement.appendChild(visualizationContainer);\n\n        // Now that we have the proper structure, load D3\n        if (!window.d3) {\n            loadD3().then(() => renderExonVisualization(exons, visualizationContainer, containerElement, chromosomeInfo));\n        } else {\n            renderExonVisualization(exons, visualizationContainer, containerElement, chromosomeInfo);\n        }\n    } catch (e) {\n        console.error(\"Error parsing exons:\", e);\n        containerElement.innerHTML = `<div class=\"alert alert-warning\">Could not parse exon information: ${exonsStr}</div>`;\n    }\n}\n\n// Function to dynamically load D3.js\nfunction loadD3() {\n    return new Promise((resolve, reject) => {\n        if (window.d3) {\n            resolve();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = 'https://d3js.org/d3.v7.min.js';\n        script.onload = () => resolve();\n        script.onerror = (err) => reject(err);\n        document.head.appendChild(script);\n    });\n}\n\n// Function to render the exon-intron structure visualization using D3\nfunction renderExonVisualization(exons, containerElement, parentContainer, chromosomeInfo = null) {\n    // Calculate genomic range for scaling\n    const minPos = Math.min(...exons.map(e => e.start));\n    const maxPos = Math.max(...exons.map(e => e.end));\n    const totalLength = maxPos - minPos + 1;\n\n    // Set up dimensions - use the full width of the container\n    const margin = { top: 45, right: 30, bottom: 50, left: 60 }; // Increased top margin for chromosome info\n    const width = containerElement.clientWidth - margin.left - margin.right;\n    const height = 180; // Increased height for better visualization\n\n    // Create SVG container\n    const svg = d3.select(containerElement)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .attr('class', 'exon-svg')\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Add the combined header text in one line\n    if (chromosomeInfo) {\n        svg.append('text')\n            .attr('x', width / 2)\n            .attr('y', -5)\n            .attr('text-anchor', 'middle')\n            .attr('class', 'chromosome-info text-header')\n            .text(`Total Exons: ${exons.length} | Chromosome ${chromosomeInfo.chrom}${chromosomeInfo.strand ? `, Strand: ${chromosomeInfo.strand}` : ''}`);\n    } else {\n        // If no chromosome info, just show exon count\n        svg.append('text')\n            .attr('x', width / 2)\n            .attr('y', -5)\n            .attr('text-anchor', 'middle')\n            .attr('class', 'text-header')\n            .style('font-size', '14px')\n            .style('fill', '#666')\n            .text(`Total Exons: ${exons.length}`);\n    }\n\n    const defs = svg.append('defs');\n\n    // Create a scale for genomic positions\n    const xScale = d3.scaleLinear()\n        .domain([minPos, maxPos])\n        .range([0, width]);\n\n    // Create axis\n    const xAxis = d3.axisBottom(xScale)\n        .tickFormat(d => d.toLocaleString())\n        .ticks(Math.min(10, width / 100)); // Responsive number of ticks\n\n    // Add genomic position axis with grid lines\n    const xAxisGroup = svg.append('g')\n        .attr('class', 'x-axis')\n        .attr('transform', `translate(0,${height - 10})`)\n        .call(xAxis);\n\n    // Style the axis\n    xAxisGroup.selectAll('text')\n        .style('font-size', '10px')\n        .style('font-weight', 'bold');\n\n    xAxisGroup.selectAll('line')\n        .style('stroke', '#ccc');\n\n    xAxisGroup.selectAll('path')\n        .style('stroke', '#ccc')\n        .style('stroke-width', '2px');\n\n    // Add axis label\n    svg.append('text')\n        .attr('x', width / 2)\n        .attr('y', height + margin.bottom - 10)\n        .style('text-anchor', 'middle')\n        .style('font-size', '12px')\n        .style('font-weight', 'bold')\n        .text('Genomic Position');\n\n    // Add vertical grid lines\n    svg.append('g')\n        .attr('class', 'grid-lines')\n        .selectAll('line')\n        .data(xScale.ticks(10))\n        .enter()\n        .append('line')\n        .attr('x1', d => xScale(d))\n        .attr('y1', 0)\n        .attr('x2', d => xScale(d))\n        .attr('y2', height - 10)\n        .attr('stroke', '#eee')\n        .attr('stroke-width', 1);\n\n    // Calculate total exon and intron length\n    const totalExonLength = exons.reduce((sum, e) => sum + e.length, 0);\n    const totalIntronLength = totalLength - totalExonLength;\n\n    // Calculate introns between consecutive exons\n    const introns = [];\n    for (let i = 0; i < exons.length - 1; i++) {\n        if (exons[i].end < exons[i + 1].start) {\n            introns.push({\n                start: exons[i].end + 1,\n                end: exons[i + 1].start - 1,\n                length: exons[i + 1].start - exons[i].end - 1,\n                index: i\n            });\n        }\n    }\n\n    // Draw connecting line through the entire transcript\n    svg.append('line')\n        .attr('x1', xScale(minPos))\n        .attr('y1', height / 2)\n        .attr('x2', xScale(maxPos))\n        .attr('y2', height / 2)\n        .attr('stroke', '#ccc')\n        .attr('stroke-width', 3);\n\n    // Create pattern for introns\n    const pattern = defs.append('pattern')\n        .attr('id', 'intron-pattern')\n        .attr('patternUnits', 'userSpaceOnUse')\n        .attr('width', 6)\n        .attr('height', 6);\n\n    pattern.append('path')\n        .attr('d', 'M-1,1 l2,-2 M0,6 l6,-6 M5,7 l2,-2')\n        .attr('stroke', '#999')\n        .attr('stroke-width', 1);\n\n    // Draw introns with animation\n    const intronLines = svg.selectAll('.intron')\n        .data(introns)\n        .enter()\n        .append('line')\n        .attr('class', 'intron')\n        .attr('x1', d => xScale(d.start))\n        .attr('y1', height / 2)\n        .attr('x2', d => xScale(d.start)) // Start from the same point for animation\n        .attr('y2', height / 2)\n        .attr('stroke', '#999')\n        .attr('stroke-width', 3)\n        .attr('stroke-dasharray', '5,5');\n\n    // Animate introns drawing\n    intronLines.transition()\n        .duration(1000)\n        .delay((d, i) => i * 100)\n        .attr('x2', d => xScale(d.end));\n\n    // Define color schemes for exons\n    const colorSchemes = [\n        d3.interpolateBlues,\n        d3.interpolateGreens,\n        d3.interpolateOranges,\n        d3.interpolatePurples\n    ];\n\n    // Use a consistent color scheme based on exon count\n    const colorScheme = colorSchemes[exons.length % colorSchemes.length];\n    const colorScale = d3.scaleSequential()\n        .domain([0, exons.length - 1])\n        .interpolator(colorScheme);\n\n    // Create a group for each exon to hold both rectangle and label\n    const exonGroups = svg.selectAll('.exon-group')\n        .data(exons)\n        .enter()\n        .append('g')\n        .attr('class', 'exon-group')\n        .attr('transform', d => `translate(${xScale(d.start)}, ${height/2 - 20})`);\n\n    // Draw exons (thick rectangles) with animation\n    const exonHeight = 40; // Taller for better visibility\n    const exonRects = exonGroups.append('rect')\n        .attr('class', 'exon')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 0) // Start with 0 width for animation\n        .attr('height', 0) // Start with 0 height for animation\n        .attr('fill', (d, i) => colorScale(i))\n        .attr('stroke', '#333')\n        .attr('stroke-width', 2)\n        .attr('rx', 6) // Rounded corners\n        .attr('ry', 6);\n\n    // Animation for exons growing\n    exonRects.transition()\n        .duration(800)\n        .delay((d, i) => i * 100)\n        .attr('height', exonHeight)\n        .transition()\n        .duration(400)\n        .attr('width', d => Math.max(6, xScale(d.end) - xScale(d.start))); // Ensure minimum width\n\n    // Add exon number labels\n    const exonLabels = exonGroups.append('text')\n        .attr('class', 'exon-label')\n        .attr('x', d => Math.max(3, (xScale(d.end) - xScale(d.start)) / 2)) // Center in the exon\n        .attr('y', exonHeight / 2 + 5) // Center vertically\n        .attr('text-anchor', 'middle')\n        .attr('fill', 'white')\n        .attr('font-weight', 'bold')\n        .attr('font-size', '12px')\n        .attr('pointer-events', 'none') // Prevent label from interfering with mouse events\n        .style('opacity', 0) // Hidden by default\n        .text((d, i) => i + 1);\n\n    // Remove animation for labels appearing since they'll be hidden by default\n\n    // Add mouse interactions for exons\n    exonGroups\n        .on('mouseover', function(event, d) {\n            const index = exons.indexOf(d);\n\n            // Highlight exon on hover\n            d3.select(this).select('rect')\n                .transition()\n                .duration(150)\n                .attr('stroke-width', 2)\n                .attr('stroke', '#ff7f0e');\n\n            // Show the exon label\n            d3.select(this).select('.exon-label')\n                .transition()\n                .duration(150)\n                .style('opacity', 1);\n\n            // Show tooltip with exon information\n            const tooltip = d3.select('#tooltip');\n            if (tooltip.empty()) {\n                console.warn('Tooltip element not found');\n                return;\n            }\n\n            tooltip.transition()\n                .duration(200)\n                .style('opacity', 1);\n\n            tooltip.html(`\n                <div class=\"exon-tooltip\">\n                    <h6 class=\"mb-1\">Exon ${index + 1}</h6>\n                    <p class=\"mb-1\"><strong>Position:</strong> ${d.start.toLocaleString()}-${d.end.toLocaleString()}</p>\n                    <p class=\"mb-1\"><strong>Length:</strong> ${d.length.toLocaleString()} bp</p>\n                    <p class=\"mb-0\"><strong>% of Transcript:</strong> ${(d.length / totalLength * 100).toFixed(2)}%</p>\n                </div>\n            `)\n                .style('left', `${event.pageX + 10}px`)\n                .style('top', `${event.pageY - 10}px`);\n        })\n        .on('mouseout', function() {\n            // Reset on mouseout\n            d3.select(this).select('rect')\n                .transition()\n                .duration(150)\n                .attr('stroke-width', 1)\n                .attr('stroke', '#333');\n\n            // Hide the exon label\n            d3.select(this).select('.exon-label')\n                .transition()\n                .duration(150)\n                .style('opacity', 0);\n\n            // Hide tooltip\n            const tooltip = d3.select('#tooltip');\n            if (!tooltip.empty()) {\n                tooltip.transition()\n                    .duration(200)\n                    .style('opacity', 0);\n            }\n        })\n        .on('click', function(event, d) {\n            // Construct coordinate string\n            let coordString;\n            if (chromosomeInfo && chromosomeInfo.chrom) {\n                coordString = `${chromosomeInfo.chrom}:${d.start.toLocaleString()}-${d.end.toLocaleString()}`;\n            } else {\n                coordString = `${d.start.toLocaleString()}-${d.end.toLocaleString()}`;\n            }\n            // Copy to clipboard\n            if (navigator.clipboard) {\n                navigator.clipboard.writeText(coordString).then(() => {\n                    showExportNotification('success', `Copied: ${coordString}`);\n                }, () => {\n                    showExportNotification('error', 'Failed to copy coordinate');\n                });\n            } else {\n                // Fallback for older browsers\n                const textarea = document.createElement('textarea');\n                textarea.value = coordString;\n                document.body.appendChild(textarea);\n                textarea.select();\n                try {\n                    document.execCommand('copy');\n                    showExportNotification('success', `Copied: ${coordString}`);\n                } catch (err) {\n                    showExportNotification('error', 'Failed to copy coordinate');\n                }\n                document.body.removeChild(textarea);\n            }\n        });\n    // Make responsive\n    function resizeVisualization() {\n        // Only adjust width if the container width changes significantly\n        if (Math.abs(parentContainer.clientWidth - width) > 20) {\n            // Recalculate width\n            const newWidth = containerElement.clientWidth - margin.left - margin.right;\n\n            // Update SVG width\n            d3.select(containerElement).select('svg')\n                .attr('width', newWidth + margin.left + margin.right);\n\n            // Update scales\n            xScale.range([0, newWidth]);\n\n            // Update all elements\n            svg.select('.x-axis').call(xAxis.ticks(Math.min(10, newWidth / 100)));\n\n            // Update exon groups and their contents\n            exonGroups.attr('transform', d => `translate(${xScale(d.start)}, ${height/2 - 20})`);\n            exonGroups.select('rect')\n                .attr('width', d => Math.max(6, xScale(d.end) - xScale(d.start)));\n            exonGroups.select('text')\n                .attr('x', d => Math.max(3, (xScale(d.end) - xScale(d.start)) / 2));\n\n            // Update intron lines\n            svg.selectAll('.intron')\n                .attr('x1', d => xScale(d.start))\n                .attr('x2', d => xScale(d.end));\n\n            // Update text elements\n            svg.selectAll('.text-header')\n                .attr('x', newWidth / 2);\n        }\n    }\n\n    // Add resize listener\n    const resizeObserver = new ResizeObserver(() => {\n        resizeVisualization();\n    });\n\n    resizeObserver.observe(parentContainer);\n\n    // Return info about the visualization\n    return {\n        exonCount: exons.length,\n        intronCount: introns.length,\n        totalLength: totalLength,\n        exonLength: totalExonLength,\n        intronLength: totalIntronLength\n    };\n}\n\n// Function to display exon/intron visualization in a modal\nexport function showExonVisualizationModal(exonsStr, title = \"Node Structure\", chromosomeInfo = null) {\n    // Create modal if it doesn't exist\n    let modal = document.getElementById('exonVisualizationModal');\n\n    // Create tooltip container if it doesn't exist\n    if (!document.getElementById('tooltip')) {\n        const tooltip = document.createElement('div');\n        tooltip.id = 'tooltip';\n        tooltip.className = 'exon-tooltip-container';\n        tooltip.style.position = 'absolute';\n        tooltip.style.opacity = '0';\n        tooltip.style.pointerEvents = 'none';\n        tooltip.style.zIndex = '1000';\n        document.body.appendChild(tooltip);\n    }\n\n    if (!modal) {\n        modal = document.createElement('div');\n        modal.id = 'exonVisualizationModal';\n        modal.className = 'modal fade';\n        modal.tabIndex = '-1';\n\n        modal.innerHTML = `\n      <div class=\"modal-dialog modal-xl\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"exonVisualizationModalLabel\">${title}</h5>\n            <div class=\"ms-auto\">\n              <button type=\"button\" id=\"exportExonSvgBtn\" class=\"btn btn-sm btn-outline-success me-2\" title=\"Export as SVG\">\n                <i class=\"bi bi-download me-1\"></i> Export SVG\n              </button>\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n            </div>\n          </div>\n          <div class=\"modal-body p-0\">\n            <div id=\"exonVisualizationContainer\" class=\"exon-container\"></div>\n            <div id=\"exonStatsContainer\" class=\"mt-3 px-3 pb-3\"></div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n          </div>\n        </div>\n      </div>\n    `;\n\n        document.body.appendChild(modal);\n\n        // Add styles for the modal and visualization\n        if (!document.getElementById('exon-visualization-styles')) {\n            const style = document.createElement('style');\n            style.id = 'exon-visualization-styles';\n            style.textContent = `\n                .modal-xl {\n                    max-width: 90%;\n                    width: 1200px;\n                }\n                .modal-body {\n                    overflow: hidden;\n                }\n                .exon-container {\n                    position: relative;\n                    height: 350px;\n                    width: 100%;\n                    background: #f9f9f9;\n                }\n                .exon-visualization-container {\n                    height: 100%;\n                    width: 100%;\n                    background: linear-gradient(to bottom, #ffffff, #f9f9f9);\n                }\n                .exon-tooltip {\n                    background-color: rgba(255, 255, 255, 0.95);\n                    border-radius: 5px;\n                    padding: 8px;\n                    box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n                    font-size: 14px;\n                    z-index: 1000;\n                }\n                .exon-tooltip h6 {\n                    border-bottom: 1px solid #eee;\n                    padding-bottom: 5px;\n                    margin-bottom: 5px;\n                    color: #333;\n                    font-size: 16px;\n                }\n                .exon-svg {\n                    background: linear-gradient(to bottom, #ffffff, #f9f9f9);\n                }\n                .stat-card {\n                    border-radius: 8px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n                    transition: transform 0.2s ease, box-shadow 0.2s ease;\n                }\n                .stat-card:hover {\n                    transform: translateY(-3px);\n                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n                }\n                .stat-value {\n                    font-size: 1.5rem;\n                    font-weight: bold;\n                }\n                .chromosome-info {\n                    font-size: 14px;\n                    color: #555;\n                    font-style: italic;\n                }\n                .text-header {\n                    font-size: 14px;\n                    margin-bottom: 5px;\n                }\n                .exon-label {\n                    dominant-baseline: middle;\n                    user-select: none;\n                    text-shadow: 0px 1px 2px rgba(0,0,0,0.7);\n                    font-size: 13px;\n                    letter-spacing: 0.5px;\n                }\n                .exon-group {\n                    cursor: pointer;\n                }\n                .exon-group:hover .exon {\n                    filter: brightness(110%);\n                }\n                .exon-group:hover .exon-label {\n                    font-weight: bolder;\n                    text-shadow: 0px 1px 3px rgba(0,0,0,0.9);\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    } else {\n        // Update the modal title\n        document.getElementById('exonVisualizationModalLabel').textContent = title;\n    }\n\n    // Create Bootstrap modal instance\n    const modalInstance = new bootstrap.Modal(modal);\n\n    // When modal is shown, render the visualization\n    modal.addEventListener('shown.bs.modal', () => {\n        const container = document.getElementById('exonVisualizationContainer');\n        const statsContainer = document.getElementById('exonStatsContainer');\n\n        // Create the visualization\n        const result = createExonVisualization(exonsStr, container, chromosomeInfo);\n\n        // Setup SVG export button\n        const exportSvgBtn = document.getElementById('exportExonSvgBtn');\n        if (exportSvgBtn) {\n            exportSvgBtn.addEventListener('click', () => {\n                const filenameBase = chromosomeInfo ?\n                    `exon_structure_chr${chromosomeInfo.chrom}_${new Date().toISOString().slice(0, 10)}` :\n                    `exon_structure_${new Date().toISOString().slice(0, 10)}`;\n                exportVisualizationToSvg(container, filenameBase);\n            });\n        }\n\n        // If visualization was successful, show enhanced stats\n        if (result) {\n            const exonPercent = (result.exonLength / result.totalLength * 100).toFixed(1);\n            const intronPercent = (result.intronLength / result.totalLength * 100).toFixed(1);\n\n            statsContainer.innerHTML = `\n        <div class=\"card border-0 shadow-sm\">\n          <div class=\"card-header bg-light\">\n            <h6 class=\"mb-0 fw-bold\">Transcript Structure Statistics</h6>\n          </div>\n          <div class=\"card-body\">\n            <div class=\"row g-3\">\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-primary bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-box me-1\"></i>\n                      <h6 class=\"mb-0\">Exons</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.exonCount}</div>\n                      <div class=\"text-muted small\">\n                        ${result.exonLength.toLocaleString()} bp (${exonPercent}%)\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-secondary bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-dash-lg me-1\"></i>\n                      <h6 class=\"mb-0\">Introns</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.intronCount}</div>\n                      <div class=\"text-muted small\">\n                        ${result.intronLength.toLocaleString()} bp (${intronPercent}%)\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-md-4\">\n                <div class=\"stat-card p-3 border bg-info bg-opacity-10 text-center h-100\">\n                  <div class=\"d-flex flex-column h-100\">\n                    <div class=\"mb-2\">\n                      <i class=\"bi bi-rulers me-1\"></i>\n                      <h6 class=\"mb-0\">Total Length</h6>\n                    </div>\n                    <div class=\"flex-grow-1 d-flex flex-column justify-content-center\">\n                      <div class=\"stat-value\">${result.totalLength.toLocaleString()}</div>\n                      <div class=\"text-muted small\">\n                        base pairs\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              ${chromosomeInfo ? `\n              <div class=\"col-12 mt-3\">\n                <div class=\"alert alert-info mb-0\">\n                  <i class=\"bi bi-info-circle me-2\"></i>\n                  <strong>Chromosome Location:</strong>\n                  Chr${chromosomeInfo.chrom}${chromosomeInfo.strand ? `, Strand: ${chromosomeInfo.strand}` : ''}\n                  (${chromosomeInfo.start?.toLocaleString() || ''}-${chromosomeInfo.end?.toLocaleString() || ''})\n                </div>\n              </div>\n              ` : ''}\n            </div>\n          </div>\n        </div>\n      `;\n        }\n    });\n\n    // Show the modal\n    modalInstance.show();\n}\n\n// Function to export the visualization as an SVG file\nfunction exportVisualizationToSvg(container, filename) {\n    // Get the SVG element from the container\n    const svgElement = container.querySelector('svg');\n\n    if (!svgElement) {\n        console.error('No SVG element found in container');\n        // Show error notification\n        showExportNotification('error', 'Failed to export SVG: No visualization found');\n        return;\n    }\n\n    try {\n        // Get SVG data with inline styles\n        const svgData = getSVGData(svgElement);\n\n        // Create a blob from the SVG string\n        const blob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        // Create a download link\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `${filename}.svg`;\n        link.style.display = 'none';\n\n        // Add to body, click to trigger download, then remove\n        document.body.appendChild(link);\n        link.click();\n\n        // Cleanup\n        setTimeout(() => {\n            document.body.removeChild(link);\n            URL.revokeObjectURL(link.href);\n\n            // Show success notification\n            showExportNotification('success', 'SVG exported successfully!');\n        }, 100);\n    } catch (error) {\n        console.error('Error exporting SVG:', error);\n        showExportNotification('error', `Failed to export SVG: ${error.message}`);\n    }\n}\n\n// Helper function to get SVG data with inline styles\nfunction getSVGData(svgElement) {\n    // Clone the SVG to avoid modifying the original\n    const svgClone = svgElement.cloneNode(true);\n\n    // Set the background color for the exported SVG\n    svgClone.style.background = 'white';\n\n    // Add required namespaces\n    svgClone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgClone.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n    // Create a style element to hold all the CSS rules\n    const styleElement = document.createElementNS('http://www.w3.org/2000/svg', 'style');\n    styleElement.textContent = getRelevantStyles();\n    svgClone.insertBefore(styleElement, svgClone.firstChild);\n\n    // Convert SVG to string\n    return new XMLSerializer().serializeToString(svgClone);\n}\n\n// Helper function to extract relevant CSS styles for the SVG\nfunction getRelevantStyles() {\n    // Get all style sheets on the page\n    const styleSheets = document.styleSheets;\n    let cssText = '';\n\n    // List of selectors relevant to the SVG\n    const relevantSelectors = [\n        '.exon', '.intron', '.exon-svg', 'svg', 'rect', 'path', 'line',\n        'text', 'g', 'circle', 'polyline', 'polygon'\n    ];\n\n    try {\n        // Loop through all style sheets\n        for (let i = 0; i < styleSheets.length; i++) {\n            const styleSheet = styleSheets[i];\n\n            try {\n                // Access the CSS rules\n                const rules = styleSheet.cssRules || styleSheet.rules;\n                if (!rules) continue;\n\n                // Loop through all CSS rules\n                for (let j = 0; j < rules.length; j++) {\n                    const rule = rules[j];\n\n                    // Check if the selector is relevant for our SVG\n                    if (rule.selectorText && relevantSelectors.some(selector =>\n                            rule.selectorText.includes(selector))) {\n                        cssText += rule.cssText + '\\n';\n                    }\n                }\n            } catch (e) {\n                // Some style sheets may not be accessible due to CORS restrictions\n                console.warn('Could not access stylesheet:', e);\n            }\n        }\n    } catch (e) {\n        console.warn('Error extracting styles:', e);\n    }\n\n    // Add some default styles to ensure proper rendering\n    cssText += `\n        .exon { fill-opacity: 1; stroke-width: 2px; }\n        .intron { stroke-dasharray: 5,5; }\n        text { font-family: Arial, sans-serif; }\n        .exon:hover { stroke: #ff7f0e; stroke-width: 2px; }\n    `;\n\n    return cssText;\n}\n\n// Function to show a notification for export result\nfunction showExportNotification(type, message) {\n    // Remove any existing notification\n    const existingNotification = document.getElementById('exportNotification');\n    if (existingNotification) {\n        existingNotification.remove();\n    }\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.id = 'exportNotification';\n    notification.className = `export-notification ${type}`;\n    notification.innerHTML = `\n        <div class=\"d-flex align-items-center\">\n            <i class=\"bi ${type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle'} me-2\"></i>\n            <span>${message}</span>\n        </div>\n    `;\n\n    // Add styles if they don't exist\n    if (!document.getElementById('export-notification-styles')) {\n        const style = document.createElement('style');\n        style.id = 'export-notification-styles';\n        style.textContent = `\n            .export-notification {\n                position: fixed;\n                bottom: 20px;\n                right: 20px;\n                padding: 10px 20px;\n                border-radius: 4px;\n                color: white;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n                z-index: 9999;\n                animation: fadeInOut 3s forwards;\n            }\n            .export-notification.success {\n                background-color: #28a745;\n            }\n            .export-notification.error {\n                background-color: #dc3545;\n            }\n            @keyframes fadeInOut {\n                0% { opacity: 0; transform: translateY(20px); }\n                10% { opacity: 1; transform: translateY(0); }\n                80% { opacity: 1; transform: translateY(0); }\n                100% { opacity: 0; transform: translateY(-20px); }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n\n    // Add to document and remove after animation\n    document.body.appendChild(notification);\n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.parentNode.removeChild(notification);\n        }\n    }, 3000);\n}\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","$daf5f90896ab6e03$var$renderExonVisualization","exons","containerElement","parentContainer","chromosomeInfo","minPos","Math","min","map","e","start","maxPos","max","end","totalLength","margin","top","right","bottom","left","width","clientWidth","svg","d3","select","append","attr","height","text","length","chrom","strand","style","defs","xScale","scaleLinear","domain","range","xAxis","axisBottom","tickFormat","d","toLocaleString","ticks","xAxisGroup","call","selectAll","data","enter","totalExonLength","reduce","sum","introns","i","push","index","pattern","intronLines","transition","duration","delay","colorSchemes","interpolateBlues","interpolateGreens","interpolateOranges","interpolatePurples","colorScheme","colorScale","scaleSequential","interpolator","exonGroups","exonRects","exonHeight","on","event","indexOf","tooltip","empty","console","warn","html","toFixed","pageX","pageY","coordString","navigator","clipboard","writeText","then","$daf5f90896ab6e03$var$showExportNotification","textarea","document","createElement","value","body","appendChild","execCommand","err","removeChild","resizeObserver","ResizeObserver","abs","newWidth","observe","exonCount","intronCount","exonLength","intronLength","$daf5f90896ab6e03$export$e2ca29b1398b1240","exonsStr","title","modal","getElementById","id","className","position","opacity","pointerEvents","zIndex","textContent","tabIndex","innerHTML","head","modalInstance","bootstrap","Modal","addEventListener","container","statsContainer","result","$daf5f90896ab6e03$export$68b4ed73db160412","exonList","replace","split","exon","Number","sort","a","b","visualizationContainer","window","$daf5f90896ab6e03$var$loadD3","Promise","resolve","reject","script","src","onload","onerror","error","exportSvgBtn","$daf5f90896ab6e03$var$exportVisualizationToSvg","filename","svgElement","querySelector","svgData","$daf5f90896ab6e03$var$getSVGData","svgClone","cloneNode","background","setAttribute","styleElement","createElementNS","$daf5f90896ab6e03$var$getRelevantStyles","styleSheets","cssText","relevantSelectors","styleSheet","rules","cssRules","j","rule","selectorText","some","selector","includes","insertBefore","firstChild","XMLSerializer","serializeToString","blob","Blob","type","link","href","URL","createObjectURL","download","display","click","setTimeout","revokeObjectURL","message","Date","toISOString","slice","exonPercent","intronPercent","show","existingNotification","remove","notification","parentNode","Object","defineProperty","get","set","s","enumerable","configurable"],"version":3,"file":"exonVisualization.5b6e4922.js.map"}