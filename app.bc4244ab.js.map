{"mappings":"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","sources":["<anon>","src/scripts/helpGuide.js"],"sourcesContent":["var $0a209b5c3feb59ed$exports = {};\n/**\n * helpGuide.js\n * A module to manage a step-by-step help guide for the Aurora application\n */ class $0a209b5c3feb59ed$var$HelpGuide {\n    constructor(){\n        this.helpSteps = [\n            // Panel help messages first\n            {\n                target: \"#cy\",\n                title: \"Graph Visualization Panel\",\n                content: \"This is the main graph visualization area. Here you can interact with your graph: zoom in/out, pan, select nodes and edges, and visualize your data structure. You can click and drag nodes to rearrange them manually.\",\n                placement: \"left\"\n            },\n            {\n                target: \"#info\",\n                title: \"Information Panel\",\n                content: \"When you select a node or edge in the graph, detailed information about that element will be displayed here. This panel shows properties, metrics, and other attributes associated with the selected element.\",\n                placement: \"left\"\n            },\n            {\n                target: \"#walks\",\n                title: \"Graph Walks Panel\",\n                content: \"This panel displays all walks (paths) in your graph. You can search for specific walks, highlight them in the graph visualization, and upload Aurora IDs for batch searching. Walks provide important connectivity information in your graph structure.\",\n                placement: \"left\"\n            },\n            // Button help messages next\n            {\n                target: \"#toggleMaximize\",\n                title: \"Toggle Fullscreen\",\n                content: \"Click this button to enter or exit fullscreen mode, giving you more space to work with your graph.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#uploadForm\",\n                title: \"Upload Files\",\n                content: \"Upload your JSON or TSG files here to visualize your graph data.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#captureGraph\",\n                title: \"Capture Graph\",\n                content: \"Save your current graph view as a PNG image to use in presentations or documentation.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#hiddenLabel\",\n                title: \"Toggle Labels\",\n                content: \"Show or hide node and edge labels to customize your graph visualization.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#toggleTooltip\",\n                title: \"Toggle Tooltips\",\n                content: \"Enable or disable tooltips that show information when hovering over graph elements.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#resetGraph\",\n                title: \"Reset Graph\",\n                content: \"Reset the graph layout to its original state.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#clearHighlights\",\n                title: \"Clear Highlights\",\n                content: \"Remove all highlights from nodes in the graph.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#geneAnnotationBtn\",\n                title: \"Gene Annotations\",\n                content: \"Add biological context to your graph by annotating nodes with gene information.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#layoutSelect\",\n                title: \"Layout Selection\",\n                content: \"Choose different layout algorithms to organize your graph in various ways.\",\n                placement: \"bottom\"\n            },\n            // Graph selection and filtering parameters\n            {\n                target: \"#graphSelectorContainer\",\n                title: \"Graph Selector\",\n                content: \"If your data contains multiple graphs, you can switch between them using this dropdown menu. Each graph represents a different dataset or view that you can analyze independently.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#minEdgeWeight\",\n                title: \"Minimum Edge Weight\",\n                content: \"Filter the graph by setting the minimum weight for edges. Edges with weights below this value will be hidden, allowing you to focus on the strongest connections in your graph.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#MinDepth\",\n                title: \"Minimum Depth\",\n                content: \"Set the minimum depth for graph traversal. This limits the graph to only show paths that have at least this many edges, helping to filter out shallow or less significant paths.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#MaxDepth\",\n                title: \"Maximum Depth\",\n                content: \"Set the maximum depth for graph traversal. This prevents the graph from showing excessively long paths, making the visualization more manageable and focused on the most relevant connections.\",\n                placement: \"bottom\"\n            },\n            {\n                target: \"#openJsonEditor\",\n                title: \"JSON Editor\",\n                content: \"Open the JSON editor to view or modify the underlying graph data structure.\",\n                placement: \"left\"\n            },\n            {\n                target: \"#redirectToIgv\",\n                title: \"IGV Browser\",\n                content: \"Launch the Integrative Genomics Viewer for detailed genomic visualization.\",\n                placement: \"left\"\n            },\n            {\n                target: \"#showNodeRanking\",\n                title: \"Node Ranking\",\n                content: \"View nodes ranked by importance based on graph metrics.\",\n                placement: \"left\"\n            },\n            {\n                target: \"#walkSearch\",\n                title: \"Search Walks\",\n                content: \"Search for specific walks or Aurora IDs in the graph.\",\n                placement: \"top\"\n            },\n            {\n                target: \"#uploadAuroraIds\",\n                title: \"Batch Search\",\n                content: \"Upload a list of Aurora IDs for batch searching across your graph.\",\n                placement: \"top\"\n            }\n        ];\n        this.currentStepIndex = 0;\n        this.isGuideActive = false;\n        this.overlay = null;\n        this.tooltip = null;\n        // Load guide progress from local storage\n        this.loadProgress();\n        // Add help button to the navbar - modified to place button in left navbar\n        this.addHelpButton();\n        // Show welcome message for first-time visitors\n        this.showWelcomeIfFirstVisit();\n    }\n    /**\n     * Show welcome message for first-time visitors\n     * Now displays in the left bottom corner of the screen\n     */ showWelcomeIfFirstVisit() {\n        const hasVisitedBefore = localStorage.getItem(\"auroraHelpGuideWelcomeSeen\");\n        if (!hasVisitedBefore) {\n            // Create a welcome toast instead of a modal\n            const toastHtml = `\n        <div class=\"help-guide-welcome-toast\">\n          <div class=\"help-guide-welcome-header\">\n            <i class=\"bi bi-question-circle text-primary me-2\"></i>\n            <strong>Welcome to Aurora!</strong>\n            <button class=\"help-guide-welcome-close\">&times;</button>\n          </div>\n          <div class=\"help-guide-welcome-body\">\n            <p>We've added an interactive help guide to help you learn how to use Aurora.</p>\n            <p class=\"mb-2\">Click the Help link in the navbar to start the interactive tour.</p>\n            <button class=\"btn btn-sm btn-primary w-100\" id=\"startWelcomeHelpBtn\">\n              <i class=\"bi bi-question-circle me-2\"></i> Start Help Guide\n            </button>\n          </div>\n        </div>\n      `;\n            // Add CSS for the welcome toast\n            const style = document.createElement(\"style\");\n            style.textContent = `\n        .help-guide-welcome-toast {\n          position: fixed;\n          bottom: 20px;\n          left: 20px;\n          width: 320px;\n          background-color: white;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          border-radius: 6px;\n          z-index: 9999;\n          overflow: hidden;\n          animation: slideInUp 0.4s ease-out;\n        }\n\n        .help-guide-welcome-header {\n          display: flex;\n          align-items: center;\n          padding: 12px 15px;\n          background-color: #f8f9fa;\n          border-bottom: 1px solid #dee2e6;\n        }\n\n        .help-guide-welcome-close {\n          margin-left: auto;\n          background: none;\n          border: none;\n          font-size: 1.5rem;\n          line-height: 1;\n          cursor: pointer;\n          color: #6c757d;\n        }\n\n        .help-guide-welcome-body {\n          padding: 15px;\n        }\n\n        @keyframes slideInUp {\n          from {\n            transform: translateY(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n      `;\n            document.head.appendChild(style);\n            // Append toast to body\n            const toastContainer = document.createElement(\"div\");\n            toastContainer.innerHTML = toastHtml;\n            document.body.appendChild(toastContainer);\n            // Add event listeners\n            document.querySelector(\".help-guide-welcome-close\").addEventListener(\"click\", ()=>{\n                document.querySelector(\".help-guide-welcome-toast\").remove();\n                localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n            });\n            document.getElementById(\"startWelcomeHelpBtn\").addEventListener(\"click\", ()=>{\n                document.querySelector(\".help-guide-welcome-toast\").remove();\n                localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n                this.startGuide();\n            });\n            // Auto-hide after 30 seconds if not interacted with\n            setTimeout(()=>{\n                const toast = document.querySelector(\".help-guide-welcome-toast\");\n                if (toast) {\n                    toast.style.animation = \"slideInUp 0.4s ease-out reverse\";\n                    setTimeout(()=>{\n                        if (toast.parentNode) {\n                            toast.remove();\n                            localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n                        }\n                    }, 400);\n                }\n            }, 30000);\n        }\n    }\n    /**\n     * Add a help button to the navbar for users to start the guide\n     * Now placing it after the \"What's New\" link\n     */ addHelpButton() {\n        // Find the \"What's New\" nav item\n        const whatsNewNavItem = document.getElementById(\"showReleaseNotesBtn\");\n        if (whatsNewNavItem) {\n            // Create a new nav item for the help guide\n            const helpNavItem = document.createElement(\"li\");\n            helpNavItem.className = \"nav-item\";\n            // Create the help button with nav-link styling to match other navbar links\n            const helpButton = document.createElement(\"a\");\n            helpButton.id = \"helpGuideButton\";\n            helpButton.className = \"nav-link\";\n            helpButton.href = \"#\";\n            helpButton.title = \"Start Help Guide\";\n            helpButton.innerHTML = '<i class=\"bi bi-question-circle\"></i> Help';\n            helpButton.addEventListener(\"click\", (e)=>{\n                e.preventDefault(); // Prevent default link behavior\n                this.startGuide();\n            });\n            // Add the button to the nav item\n            helpNavItem.appendChild(helpButton);\n            // Find the parent ul of whatsNewNavItem\n            const navParent = whatsNewNavItem.closest(\"ul\");\n            // Get the list item containing the \"What's New\" link\n            const whatsNewLi = whatsNewNavItem.closest(\"li\");\n            // Insert the help nav item after the \"What's New\" nav item\n            if (whatsNewLi && navParent) navParent.insertBefore(helpNavItem, whatsNewLi.nextSibling);\n        }\n    }\n    /**\n     * Start or continue the help guide\n     */ startGuide() {\n        if (this.isGuideActive) return;\n        this.isGuideActive = true;\n        // Create overlay\n        this.createOverlay();\n        // Always start from the first step when manually clicking the help button\n        // This fixes the issue with tooltips appearing off-screen\n        this.showStep(0);\n    }\n    /**\n     * Create a semi-transparent overlay with a tooltip\n     */ createOverlay() {\n        // Create overlay if it doesn't exist\n        if (!this.overlay) {\n            this.overlay = document.createElement(\"div\");\n            this.overlay.className = \"help-guide-overlay\";\n            document.body.appendChild(this.overlay);\n            // Add CSS for overlay\n            const style = document.createElement(\"style\");\n            style.textContent = `\n                .help-guide-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background-color: rgba(0, 0, 0, 0.5);\n                    z-index: 9998;\n                    pointer-events: none;\n                }\n\n                .help-guide-tooltip {\n                    position: absolute;\n                    z-index: 9999;\n                    background-color: white;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n                    border-radius: 4px;\n                    padding: 15px;\n                    max-width: 300px;\n                    pointer-events: auto;\n                }\n\n                .help-guide-tooltip h5 {\n                    margin-top: 0;\n                    color: #007bff;\n                }\n\n                .help-guide-tooltip p {\n                    margin-bottom: 10px;\n                }\n\n                .help-guide-buttons {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    gap: 10px;\n                    margin-top: 10px;\n                }\n\n                .help-guide-nav-group {\n                    display: flex;\n                    align-items: center;\n                    gap: 8px;\n                }\n\n                .help-guide-step-indicator {\n                    min-width: 70px;\n                    text-align: center;\n                    font-weight: 500;\n                }\n\n                .target-highlight {\n                    position: relative;\n                    z-index: 9999;\n                    pointer-events: auto;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n        // Create tooltip if it doesn't exist\n        if (!this.tooltip) {\n            this.tooltip = document.createElement(\"div\");\n            this.tooltip.className = \"help-guide-tooltip\";\n            document.body.appendChild(this.tooltip);\n        }\n    }\n    /**\n     * Show a specific step in the guide\n     * @param {number} index - The index of the step to show\n     */ showStep(index) {\n        // Ensure index is valid\n        if (index < 0 || index >= this.helpSteps.length) {\n            this.endGuide();\n            return;\n        }\n        this.currentStepIndex = index;\n        // Get target element\n        const step = this.helpSteps[index];\n        const targetElement = document.querySelector(step.target);\n        if (!targetElement) {\n            console.error(`Target element ${step.target} not found`);\n            this.nextStep();\n            return;\n        }\n        // Make target element visible through overlay\n        targetElement.classList.add(\"target-highlight\");\n        // First make sure the element is in view\n        this.scrollElementIntoView(targetElement).then(()=>{\n            // Position tooltip near target after scrolling\n            this.positionTooltip(targetElement, step.placement);\n            // Update tooltip content\n            this.tooltip.innerHTML = `\n        <h5>${step.title}</h5>\n        <p>${step.content}</p>\n        <div class=\"help-guide-buttons\">\n          <div class=\"help-guide-nav-group\">\n            <button id=\"helpGuidePrev\" class=\"btn btn-sm btn-outline-secondary\"${index === 0 ? \" disabled\" : \"\"}>\n              <i class=\"bi bi-chevron-left\"></i> Previous\n            </button>\n            <span class=\"help-guide-step-indicator\">${index + 1} of ${this.helpSteps.length}</span>\n            <button id=\"helpGuideNext\" class=\"btn btn-sm btn-outline-primary\">\n              ${index === this.helpSteps.length - 1 ? 'Finish <i class=\"bi bi-check-lg\"></i>' : 'Next <i class=\"bi bi-chevron-right\"></i>'}\n            </button>\n          </div>\n          <button id=\"helpGuideClose\" class=\"btn btn-sm btn-outline-danger\">\n            <i class=\"bi bi-x-lg\"></i> Close\n          </button>\n        </div>\n      `;\n            // Add event listeners to navigation buttons\n            document.getElementById(\"helpGuidePrev\").addEventListener(\"click\", ()=>{\n                this.previousStep();\n            });\n            document.getElementById(\"helpGuideNext\").addEventListener(\"click\", ()=>{\n                this.nextStep();\n            });\n            // Add event listener to close button\n            document.getElementById(\"helpGuideClose\").addEventListener(\"click\", ()=>{\n                this.endGuide();\n            });\n            // Save progress\n            this.saveProgress();\n        });\n    }\n    /**\n     * Position the tooltip relative to the target element\n     * @param {HTMLElement} targetElement - The target element\n     * @param {string} placement - The preferred placement (top, bottom, left, right)\n     */ positionTooltip(targetElement, placement) {\n        // Ensure the target element is visible first\n        this.scrollElementIntoView(targetElement);\n        // Get fresh measurements after scrolling\n        const targetRect = targetElement.getBoundingClientRect();\n        // Wait a moment for the scroll to complete before positioning the tooltip\n        setTimeout(()=>{\n            const tooltipRect = this.tooltip.getBoundingClientRect();\n            // Calculate position based on placement\n            let top, left;\n            const margin = 15; // Increased margin for better visibility\n            // First try the preferred placement\n            switch(placement){\n                case \"top\":\n                    top = targetRect.top - tooltipRect.height - margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n                    break;\n                case \"bottom\":\n                    top = targetRect.bottom + margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n                    break;\n                case \"left\":\n                    top = targetRect.top + (targetRect.height - tooltipRect.height) / 2;\n                    left = targetRect.left - tooltipRect.width - margin;\n                    break;\n                case \"right\":\n                    top = targetRect.top + (targetRect.height - tooltipRect.height) / 2;\n                    left = targetRect.right + margin;\n                    break;\n                default:\n                    top = targetRect.bottom + margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n            }\n            // Get viewport dimensions\n            const viewportWidth = window.innerWidth;\n            const viewportHeight = window.innerHeight;\n            // Adjust position if tooltip would be outside viewport\n            // Left edge check\n            if (left < margin) left = margin;\n            // Right edge check\n            if (left + tooltipRect.width > viewportWidth - margin) left = viewportWidth - tooltipRect.width - margin;\n            // Top edge check\n            if (top < margin) {\n                // If it would be off the top, try to place it at the bottom instead\n                if (placement === \"top\") top = targetRect.bottom + margin; // Try bottom placement instead\n                else top = margin;\n            }\n            // Bottom edge check\n            if (top + tooltipRect.height > viewportHeight - margin) {\n                // If it would be off the bottom, try to place it at the top instead\n                if (placement === \"bottom\") {\n                    top = targetRect.top - tooltipRect.height - margin; // Try top placement instead\n                    // If that would still be off the top of the viewport, place at the top with margin\n                    if (top < margin) top = margin;\n                } else // Otherwise, position it so the bottom of the tooltip is just within the viewport\n                top = viewportHeight - tooltipRect.height - margin;\n            }\n            // Set tooltip position\n            this.tooltip.style.top = `${top}px`;\n            this.tooltip.style.left = `${left}px`;\n        }, 250); // Small delay to ensure scrolling has completed\n    }\n    /**\n     * Scroll an element into view if it's not already visible\n     * @param {HTMLElement} element - The element to scroll into view\n     */ scrollElementIntoView(element) {\n        const elementRect = element.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const isInView = elementRect.top >= 0 && elementRect.left >= 0 && elementRect.bottom <= viewportHeight && elementRect.right <= window.innerWidth;\n        if (!isInView) {\n            // Scroll element into view with some margin\n            element.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n                inline: \"center\"\n            });\n            // Give some time for scroll to complete\n            return new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Move to the next step in the guide\n     */ nextStep() {\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        const currentTarget = document.querySelector(currentStep.target);\n        if (currentTarget) currentTarget.classList.remove(\"target-highlight\");\n        // Move to next step or end guide if at last step\n        if (this.currentStepIndex === this.helpSteps.length - 1) this.endGuide();\n        else this.showStep(this.currentStepIndex + 1);\n    }\n    /**\n     * Move to the previous step in the guide\n     */ previousStep() {\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        const currentTarget = document.querySelector(currentStep.target);\n        if (currentTarget) currentTarget.classList.remove(\"target-highlight\");\n        // Move to previous step if not at first step\n        if (this.currentStepIndex > 0) this.showStep(this.currentStepIndex - 1);\n    }\n    /**\n     * End the help guide\n     */ endGuide() {\n        this.isGuideActive = false;\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        if (currentStep) {\n            const currentTarget = document.querySelector(currentStep.target);\n            if (currentTarget) currentTarget.classList.remove(\"target-highlight\");\n        }\n        // Remove overlay and tooltip\n        if (this.overlay) {\n            document.body.removeChild(this.overlay);\n            this.overlay = null;\n        }\n        if (this.tooltip) {\n            document.body.removeChild(this.tooltip);\n            this.tooltip = null;\n        }\n        // Reset current step index for next time\n        this.saveProgress();\n    }\n    /**\n     * Save the current progress to local storage\n     */ saveProgress() {\n        localStorage.setItem(\"auroraHelpGuideProgress\", JSON.stringify({\n            lastViewedStep: this.currentStepIndex,\n            lastViewedDate: new Date().toISOString()\n        }));\n    }\n    /**\n     * Load progress from local storage\n     */ loadProgress() {\n        try {\n            const savedProgress = JSON.parse(localStorage.getItem(\"auroraHelpGuideProgress\"));\n            if (savedProgress) {\n                // Only restore progress if it's from the last 7 days\n                const lastViewedDate = new Date(savedProgress.lastViewedDate);\n                const now = new Date();\n                const daysDiff = (now - lastViewedDate) / 86400000;\n                if (daysDiff <= 7) this.currentStepIndex = savedProgress.lastViewedStep;\n            }\n        } catch (error) {\n            console.error(\"Error loading help guide progress:\", error);\n            this.currentStepIndex = 0;\n        }\n    }\n}\n// Initialize the help guide when the DOM is fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    window.auroraHelpGuide = new $0a209b5c3feb59ed$var$HelpGuide();\n});\n\n\n//# sourceMappingURL=app.bc4244ab.js.map\n","/**\n * helpGuide.js\n * A module to manage a step-by-step help guide for the Aurora application\n */\n\nclass HelpGuide {\n    constructor() {\n        this.helpSteps = [\n            // Panel help messages first\n            {\n                target: \"#cy\",\n                title: \"Graph Visualization Panel\",\n                content: \"This is the main graph visualization area. Here you can interact with your graph: zoom in/out, pan, select nodes and edges, and visualize your data structure. You can click and drag nodes to rearrange them manually.\",\n                placement: \"left\",\n            },\n            {\n                target: \"#info\",\n                title: \"Information Panel\",\n                content: \"When you select a node or edge in the graph, detailed information about that element will be displayed here. This panel shows properties, metrics, and other attributes associated with the selected element.\",\n                placement: \"left\",\n            },\n            {\n                target: \"#walks\",\n                title: \"Graph Walks Panel\",\n                content: \"This panel displays all walks (paths) in your graph. You can search for specific walks, highlight them in the graph visualization, and upload Aurora IDs for batch searching. Walks provide important connectivity information in your graph structure.\",\n                placement: \"left\",\n            },\n\n            // Button help messages next\n            {\n                target: \"#toggleMaximize\",\n                title: \"Toggle Fullscreen\",\n                content: \"Click this button to enter or exit fullscreen mode, giving you more space to work with your graph.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#uploadForm\",\n                title: \"Upload Files\",\n                content: \"Upload your JSON or TSG files here to visualize your graph data.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#captureGraph\",\n                title: \"Capture Graph\",\n                content: \"Save your current graph view as a PNG image to use in presentations or documentation.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#hiddenLabel\",\n                title: \"Toggle Labels\",\n                content: \"Show or hide node and edge labels to customize your graph visualization.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#toggleTooltip\",\n                title: \"Toggle Tooltips\",\n                content: \"Enable or disable tooltips that show information when hovering over graph elements.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#resetGraph\",\n                title: \"Reset Graph\",\n                content: \"Reset the graph layout to its original state.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#clearHighlights\",\n                title: \"Clear Highlights\",\n                content: \"Remove all highlights from nodes in the graph.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#geneAnnotationBtn\",\n                title: \"Gene Annotations\",\n                content: \"Add biological context to your graph by annotating nodes with gene information.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#layoutSelect\",\n                title: \"Layout Selection\",\n                content: \"Choose different layout algorithms to organize your graph in various ways.\",\n                placement: \"bottom\",\n            },\n\n            // Graph selection and filtering parameters\n            {\n                target: \"#graphSelectorContainer\",\n                title: \"Graph Selector\",\n                content: \"If your data contains multiple graphs, you can switch between them using this dropdown menu. Each graph represents a different dataset or view that you can analyze independently.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#minEdgeWeight\",\n                title: \"Minimum Edge Weight\",\n                content: \"Filter the graph by setting the minimum weight for edges. Edges with weights below this value will be hidden, allowing you to focus on the strongest connections in your graph.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#MinDepth\",\n                title: \"Minimum Depth\",\n                content: \"Set the minimum depth for graph traversal. This limits the graph to only show paths that have at least this many edges, helping to filter out shallow or less significant paths.\",\n                placement: \"bottom\",\n            },\n            {\n                target: \"#MaxDepth\",\n                title: \"Maximum Depth\",\n                content: \"Set the maximum depth for graph traversal. This prevents the graph from showing excessively long paths, making the visualization more manageable and focused on the most relevant connections.\",\n                placement: \"bottom\",\n            },\n\n            {\n                target: \"#openJsonEditor\",\n                title: \"JSON Editor\",\n                content: \"Open the JSON editor to view or modify the underlying graph data structure.\",\n                placement: \"left\",\n            },\n            {\n                target: \"#redirectToIgv\",\n                title: \"IGV Browser\",\n                content: \"Launch the Integrative Genomics Viewer for detailed genomic visualization.\",\n                placement: \"left\",\n            },\n            {\n                target: \"#showNodeRanking\",\n                title: \"Node Ranking\",\n                content: \"View nodes ranked by importance based on graph metrics.\",\n                placement: \"left\",\n            },\n            {\n                target: \"#walkSearch\",\n                title: \"Search Walks\",\n                content: \"Search for specific walks or Aurora IDs in the graph.\",\n                placement: \"top\",\n            },\n            {\n                target: \"#uploadAuroraIds\",\n                title: \"Batch Search\",\n                content: \"Upload a list of Aurora IDs for batch searching across your graph.\",\n                placement: \"top\",\n            },\n        ];\n\n        this.currentStepIndex = 0;\n        this.isGuideActive = false;\n        this.overlay = null;\n        this.tooltip = null;\n\n        // Load guide progress from local storage\n        this.loadProgress();\n\n        // Add help button to the navbar - modified to place button in left navbar\n        this.addHelpButton();\n\n        // Show welcome message for first-time visitors\n        this.showWelcomeIfFirstVisit();\n    }\n\n    /**\n     * Show welcome message for first-time visitors\n     * Now displays in the left bottom corner of the screen\n     */\n    showWelcomeIfFirstVisit() {\n        const hasVisitedBefore = localStorage.getItem(\"auroraHelpGuideWelcomeSeen\");\n\n        if (!hasVisitedBefore) {\n            // Create a welcome toast instead of a modal\n            const toastHtml = `\n        <div class=\"help-guide-welcome-toast\">\n          <div class=\"help-guide-welcome-header\">\n            <i class=\"bi bi-question-circle text-primary me-2\"></i>\n            <strong>Welcome to Aurora!</strong>\n            <button class=\"help-guide-welcome-close\">&times;</button>\n          </div>\n          <div class=\"help-guide-welcome-body\">\n            <p>We've added an interactive help guide to help you learn how to use Aurora.</p>\n            <p class=\"mb-2\">Click the Help link in the navbar to start the interactive tour.</p>\n            <button class=\"btn btn-sm btn-primary w-100\" id=\"startWelcomeHelpBtn\">\n              <i class=\"bi bi-question-circle me-2\"></i> Start Help Guide\n            </button>\n          </div>\n        </div>\n      `;\n\n            // Add CSS for the welcome toast\n            const style = document.createElement(\"style\");\n            style.textContent = `\n        .help-guide-welcome-toast {\n          position: fixed;\n          bottom: 20px;\n          left: 20px;\n          width: 320px;\n          background-color: white;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n          border-radius: 6px;\n          z-index: 9999;\n          overflow: hidden;\n          animation: slideInUp 0.4s ease-out;\n        }\n\n        .help-guide-welcome-header {\n          display: flex;\n          align-items: center;\n          padding: 12px 15px;\n          background-color: #f8f9fa;\n          border-bottom: 1px solid #dee2e6;\n        }\n\n        .help-guide-welcome-close {\n          margin-left: auto;\n          background: none;\n          border: none;\n          font-size: 1.5rem;\n          line-height: 1;\n          cursor: pointer;\n          color: #6c757d;\n        }\n\n        .help-guide-welcome-body {\n          padding: 15px;\n        }\n\n        @keyframes slideInUp {\n          from {\n            transform: translateY(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n      `;\n            document.head.appendChild(style);\n\n            // Append toast to body\n            const toastContainer = document.createElement(\"div\");\n            toastContainer.innerHTML = toastHtml;\n            document.body.appendChild(toastContainer);\n\n            // Add event listeners\n            document\n                .querySelector(\".help-guide-welcome-close\")\n                .addEventListener(\"click\", () => {\n                    document.querySelector(\".help-guide-welcome-toast\").remove();\n                    localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n                });\n\n            document\n                .getElementById(\"startWelcomeHelpBtn\")\n                .addEventListener(\"click\", () => {\n                    document.querySelector(\".help-guide-welcome-toast\").remove();\n                    localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n                    this.startGuide();\n                });\n\n            // Auto-hide after 30 seconds if not interacted with\n            setTimeout(() => {\n                const toast = document.querySelector(\".help-guide-welcome-toast\");\n                if (toast) {\n                    toast.style.animation = \"slideInUp 0.4s ease-out reverse\";\n                    setTimeout(() => {\n                        if (toast.parentNode) {\n                            toast.remove();\n                            localStorage.setItem(\"auroraHelpGuideWelcomeSeen\", \"true\");\n                        }\n                    }, 400);\n                }\n            }, 30000);\n        }\n    }\n\n    /**\n     * Add a help button to the navbar for users to start the guide\n     * Now placing it after the \"What's New\" link\n     */\n    addHelpButton() {\n        // Find the \"What's New\" nav item\n        const whatsNewNavItem = document.getElementById(\"showReleaseNotesBtn\");\n\n        if (whatsNewNavItem) {\n            // Create a new nav item for the help guide\n            const helpNavItem = document.createElement(\"li\");\n            helpNavItem.className = \"nav-item\";\n\n            // Create the help button with nav-link styling to match other navbar links\n            const helpButton = document.createElement(\"a\");\n            helpButton.id = \"helpGuideButton\";\n            helpButton.className = \"nav-link\";\n            helpButton.href = \"#\";\n            helpButton.title = \"Start Help Guide\";\n            helpButton.innerHTML = '<i class=\"bi bi-question-circle\"></i> Help';\n            helpButton.addEventListener(\"click\", (e) => {\n                e.preventDefault(); // Prevent default link behavior\n                this.startGuide();\n            });\n\n            // Add the button to the nav item\n            helpNavItem.appendChild(helpButton);\n\n            // Find the parent ul of whatsNewNavItem\n            const navParent = whatsNewNavItem.closest(\"ul\");\n\n            // Get the list item containing the \"What's New\" link\n            const whatsNewLi = whatsNewNavItem.closest(\"li\");\n\n            // Insert the help nav item after the \"What's New\" nav item\n            if (whatsNewLi && navParent) {\n                navParent.insertBefore(helpNavItem, whatsNewLi.nextSibling);\n            }\n        }\n    }\n\n    /**\n     * Start or continue the help guide\n     */\n    startGuide() {\n        if (this.isGuideActive) return;\n\n        this.isGuideActive = true;\n\n        // Create overlay\n        this.createOverlay();\n\n        // Always start from the first step when manually clicking the help button\n        // This fixes the issue with tooltips appearing off-screen\n        this.showStep(0);\n    }\n\n    /**\n     * Create a semi-transparent overlay with a tooltip\n     */\n    createOverlay() {\n        // Create overlay if it doesn't exist\n        if (!this.overlay) {\n            this.overlay = document.createElement(\"div\");\n            this.overlay.className = \"help-guide-overlay\";\n            document.body.appendChild(this.overlay);\n\n            // Add CSS for overlay\n            const style = document.createElement(\"style\");\n            style.textContent = `\n                .help-guide-overlay {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background-color: rgba(0, 0, 0, 0.5);\n                    z-index: 9998;\n                    pointer-events: none;\n                }\n\n                .help-guide-tooltip {\n                    position: absolute;\n                    z-index: 9999;\n                    background-color: white;\n                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n                    border-radius: 4px;\n                    padding: 15px;\n                    max-width: 300px;\n                    pointer-events: auto;\n                }\n\n                .help-guide-tooltip h5 {\n                    margin-top: 0;\n                    color: #007bff;\n                }\n\n                .help-guide-tooltip p {\n                    margin-bottom: 10px;\n                }\n\n                .help-guide-buttons {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    gap: 10px;\n                    margin-top: 10px;\n                }\n\n                .help-guide-nav-group {\n                    display: flex;\n                    align-items: center;\n                    gap: 8px;\n                }\n\n                .help-guide-step-indicator {\n                    min-width: 70px;\n                    text-align: center;\n                    font-weight: 500;\n                }\n\n                .target-highlight {\n                    position: relative;\n                    z-index: 9999;\n                    pointer-events: auto;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n\n        // Create tooltip if it doesn't exist\n        if (!this.tooltip) {\n            this.tooltip = document.createElement(\"div\");\n            this.tooltip.className = \"help-guide-tooltip\";\n            document.body.appendChild(this.tooltip);\n        }\n    }\n\n    /**\n     * Show a specific step in the guide\n     * @param {number} index - The index of the step to show\n     */\n    showStep(index) {\n        // Ensure index is valid\n        if (index < 0 || index >= this.helpSteps.length) {\n            this.endGuide();\n            return;\n        }\n\n        this.currentStepIndex = index;\n\n        // Get target element\n        const step = this.helpSteps[index];\n        const targetElement = document.querySelector(step.target);\n\n        if (!targetElement) {\n            console.error(`Target element ${step.target} not found`);\n            this.nextStep();\n            return;\n        }\n\n        // Make target element visible through overlay\n        targetElement.classList.add(\"target-highlight\");\n\n        // First make sure the element is in view\n        this.scrollElementIntoView(targetElement).then(() => {\n            // Position tooltip near target after scrolling\n            this.positionTooltip(targetElement, step.placement);\n\n            // Update tooltip content\n            this.tooltip.innerHTML = `\n        <h5>${step.title}</h5>\n        <p>${step.content}</p>\n        <div class=\"help-guide-buttons\">\n          <div class=\"help-guide-nav-group\">\n            <button id=\"helpGuidePrev\" class=\"btn btn-sm btn-outline-secondary\"${\n              index === 0 ? \" disabled\" : \"\"\n            }>\n              <i class=\"bi bi-chevron-left\"></i> Previous\n            </button>\n            <span class=\"help-guide-step-indicator\">${index + 1} of ${this.helpSteps.length}</span>\n            <button id=\"helpGuideNext\" class=\"btn btn-sm btn-outline-primary\">\n              ${\n                index === this.helpSteps.length - 1\n                  ? 'Finish <i class=\"bi bi-check-lg\"></i>'\n                  : 'Next <i class=\"bi bi-chevron-right\"></i>'\n              }\n            </button>\n          </div>\n          <button id=\"helpGuideClose\" class=\"btn btn-sm btn-outline-danger\">\n            <i class=\"bi bi-x-lg\"></i> Close\n          </button>\n        </div>\n      `;\n\n            // Add event listeners to navigation buttons\n            document.getElementById(\"helpGuidePrev\").addEventListener(\"click\", () => {\n                this.previousStep();\n            });\n\n            document.getElementById(\"helpGuideNext\").addEventListener(\"click\", () => {\n                this.nextStep();\n            });\n\n            // Add event listener to close button\n            document.getElementById(\"helpGuideClose\").addEventListener(\"click\", () => {\n                this.endGuide();\n            });\n\n            // Save progress\n            this.saveProgress();\n        });\n    }\n\n    /**\n     * Position the tooltip relative to the target element\n     * @param {HTMLElement} targetElement - The target element\n     * @param {string} placement - The preferred placement (top, bottom, left, right)\n     */\n    positionTooltip(targetElement, placement) {\n        // Ensure the target element is visible first\n        this.scrollElementIntoView(targetElement);\n\n        // Get fresh measurements after scrolling\n        const targetRect = targetElement.getBoundingClientRect();\n\n        // Wait a moment for the scroll to complete before positioning the tooltip\n        setTimeout(() => {\n            const tooltipRect = this.tooltip.getBoundingClientRect();\n\n            // Calculate position based on placement\n            let top, left;\n            const margin = 15; // Increased margin for better visibility\n\n            // First try the preferred placement\n            switch (placement) {\n                case \"top\":\n                    top = targetRect.top - tooltipRect.height - margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n                    break;\n                case \"bottom\":\n                    top = targetRect.bottom + margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n                    break;\n                case \"left\":\n                    top = targetRect.top + (targetRect.height - tooltipRect.height) / 2;\n                    left = targetRect.left - tooltipRect.width - margin;\n                    break;\n                case \"right\":\n                    top = targetRect.top + (targetRect.height - tooltipRect.height) / 2;\n                    left = targetRect.right + margin;\n                    break;\n                default:\n                    top = targetRect.bottom + margin;\n                    left = targetRect.left + (targetRect.width - tooltipRect.width) / 2;\n            }\n\n            // Get viewport dimensions\n            const viewportWidth = window.innerWidth;\n            const viewportHeight = window.innerHeight;\n\n            // Adjust position if tooltip would be outside viewport\n            // Left edge check\n            if (left < margin) {\n                left = margin;\n            }\n            // Right edge check\n            if (left + tooltipRect.width > viewportWidth - margin) {\n                left = viewportWidth - tooltipRect.width - margin;\n            }\n\n            // Top edge check\n            if (top < margin) {\n                // If it would be off the top, try to place it at the bottom instead\n                if (placement === \"top\") {\n                    top = targetRect.bottom + margin; // Try bottom placement instead\n                } else {\n                    top = margin;\n                }\n            }\n\n            // Bottom edge check\n            if (top + tooltipRect.height > viewportHeight - margin) {\n                // If it would be off the bottom, try to place it at the top instead\n                if (placement === \"bottom\") {\n                    top = targetRect.top - tooltipRect.height - margin; // Try top placement instead\n\n                    // If that would still be off the top of the viewport, place at the top with margin\n                    if (top < margin) {\n                        top = margin;\n                    }\n                } else {\n                    // Otherwise, position it so the bottom of the tooltip is just within the viewport\n                    top = viewportHeight - tooltipRect.height - margin;\n                }\n            }\n\n            // Set tooltip position\n            this.tooltip.style.top = `${top}px`;\n            this.tooltip.style.left = `${left}px`;\n        }, 250); // Small delay to ensure scrolling has completed\n    }\n\n    /**\n     * Scroll an element into view if it's not already visible\n     * @param {HTMLElement} element - The element to scroll into view\n     */\n    scrollElementIntoView(element) {\n        const elementRect = element.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const isInView =\n            elementRect.top >= 0 &&\n            elementRect.left >= 0 &&\n            elementRect.bottom <= viewportHeight &&\n            elementRect.right <= window.innerWidth;\n\n        if (!isInView) {\n            // Scroll element into view with some margin\n            element.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\",\n                inline: \"center\",\n            });\n\n            // Give some time for scroll to complete\n            return new Promise((resolve) => setTimeout(resolve, 200));\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Move to the next step in the guide\n     */\n    nextStep() {\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        const currentTarget = document.querySelector(currentStep.target);\n        if (currentTarget) {\n            currentTarget.classList.remove(\"target-highlight\");\n        }\n\n        // Move to next step or end guide if at last step\n        if (this.currentStepIndex === this.helpSteps.length - 1) {\n            this.endGuide();\n        } else {\n            this.showStep(this.currentStepIndex + 1);\n        }\n    }\n\n    /**\n     * Move to the previous step in the guide\n     */\n    previousStep() {\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        const currentTarget = document.querySelector(currentStep.target);\n        if (currentTarget) {\n            currentTarget.classList.remove(\"target-highlight\");\n        }\n\n        // Move to previous step if not at first step\n        if (this.currentStepIndex > 0) {\n            this.showStep(this.currentStepIndex - 1);\n        }\n    }\n\n    /**\n     * End the help guide\n     */\n    endGuide() {\n        this.isGuideActive = false;\n\n        // Remove highlight from current target\n        const currentStep = this.helpSteps[this.currentStepIndex];\n        if (currentStep) {\n            const currentTarget = document.querySelector(currentStep.target);\n            if (currentTarget) {\n                currentTarget.classList.remove(\"target-highlight\");\n            }\n        }\n\n        // Remove overlay and tooltip\n        if (this.overlay) {\n            document.body.removeChild(this.overlay);\n            this.overlay = null;\n        }\n\n        if (this.tooltip) {\n            document.body.removeChild(this.tooltip);\n            this.tooltip = null;\n        }\n\n        // Reset current step index for next time\n        this.saveProgress();\n    }\n\n    /**\n     * Save the current progress to local storage\n     */\n    saveProgress() {\n        localStorage.setItem(\n            \"auroraHelpGuideProgress\",\n            JSON.stringify({\n                lastViewedStep: this.currentStepIndex,\n                lastViewedDate: new Date().toISOString(),\n            })\n        );\n    }\n\n    /**\n     * Load progress from local storage\n     */\n    loadProgress() {\n        try {\n            const savedProgress = JSON.parse(\n                localStorage.getItem(\"auroraHelpGuideProgress\")\n            );\n            if (savedProgress) {\n                // Only restore progress if it's from the last 7 days\n                const lastViewedDate = new Date(savedProgress.lastViewedDate);\n                const now = new Date();\n                const daysDiff = (now - lastViewedDate) / (1000 * 60 * 60 * 24);\n\n                if (daysDiff <= 7) {\n                    this.currentStepIndex = savedProgress.lastViewedStep;\n                }\n            }\n        } catch (error) {\n            console.error(\"Error loading help guide progress:\", error);\n            this.currentStepIndex = 0;\n        }\n    }\n}\n\n// Initialize the help guide when the DOM is fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    window.auroraHelpGuide = new HelpGuide();\n});\n"],"names":["$0a209b5c3feb59ed$var$HelpGuide","constructor","helpSteps","target","title","content","placement","currentStepIndex","isGuideActive","overlay","tooltip","loadProgress","addHelpButton","showWelcomeIfFirstVisit","localStorage","getItem","toastHtml","style","document","createElement","textContent","head","appendChild","toastContainer","innerHTML","body","querySelector","addEventListener","remove","setItem","getElementById","startGuide","setTimeout","toast","animation","parentNode","whatsNewNavItem","helpNavItem","className","helpButton","id","href","e","preventDefault","navParent","closest","whatsNewLi","insertBefore","nextSibling","createOverlay","showStep","index","length","endGuide","step","targetElement","console","error","nextStep","classList","add","scrollElementIntoView","then","positionTooltip","previousStep","saveProgress","targetRect","getBoundingClientRect","top","left","tooltipRect","height","width","bottom","right","viewportWidth","window","innerWidth","viewportHeight","innerHeight","element","elementRect","Promise","resolve","scrollIntoView","behavior","block","inline","currentStep","currentTarget","removeChild","JSON","stringify","lastViewedStep","lastViewedDate","Date","toISOString","savedProgress","parse","daysDiff","now","auroraHelpGuide"],"version":3,"file":"app.bc4244ab.js.map"}