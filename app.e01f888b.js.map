{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,S,E,E,SCMA,MAAM,EAAc,SAAS,cAAc,CAAC,MACtC,EAAY,SAAS,cAAc,CAAC,QACpC,EAAa,SAAS,cAAc,CAAC,SAGrC,EAAiB,SAAS,cAAc,CAAC,kBAC/C,IAAI,EAAc,CAAA,EAGlB,EAAe,gBAAgB,CAAC,QAAS,KACjC,GAEA,EAAY,KAAK,CAAC,KAAK,CAAG,GAC1B,EAAY,KAAK,CAAC,MAAM,CAAG,GAC3B,EAAU,KAAK,CAAC,OAAO,CAAG,GAC1B,EAAW,KAAK,CAAC,OAAO,CAAG,GAC3B,EAAc,CAAA,IAGd,EAAY,KAAK,CAAC,KAAK,CAAG,OAC1B,EAAY,KAAK,CAAC,MAAM,CAAG,QAC3B,EAAU,KAAK,CAAC,OAAO,CAAG,OAC1B,EAAW,KAAK,CAAC,OAAO,CAAG,OAC3B,EAAc,CAAA,EAEtB,GAqBA,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAnBxD,WAEI,IAAM,EAAiB,AAAC,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,IAAoC,GAAf,aACvC,EAAiB,AAAC,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,IAAsC,GAAjB,eAE7C,AAAA,CAAA,EAAA,EAAA,KAAI,AAAJ,EAAM,EAAE,CACH,KAAK,GACL,QAAQ,CAAC,QACT,KAAK,CAAC,CACH,MAAO,CACX,GACC,QAAQ,CAAC,QACT,KAAK,CAAC,CACH,MAAO,CACX,GACC,MAAM,GACX,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,EAAiB,CAAC,AAAA,CAAA,EAAA,EAAA,gBAAe,AAAf,IACtB,GAIA,SAAS,cAAc,CAAC,gBAAgB,gBAAgB,CAAC,QAAS,KAE9D,IAAM,EAAc,AAAA,CAAA,EAAA,EAAA,KAAI,AAAJ,EAAM,EAAE,CAAC,GAAG,GAG1B,EAAe,SAAS,aAAa,CAAC,IAC5C,CAAA,EAAa,IAAI,CAAG,EACpB,EAAa,QAAQ,CAAG,oBAGxB,EAAa,KAAK,EACtB,GAEA,SAAS,cAAc,CAAC,iBAAiB,gBAAgB,CAAC,QAAS,KAC/D,OAAO,IAAI,CAAC,WAAY,SAC5B,GAEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,GACJ,GAEA,SACK,cAAc,CAAC,eACf,gBAAgB,CAAC,SAEtB,SAA0B,CAAK,EAC3B,IAAM,EAAO,EAAM,MAAM,CAAC,KAAK,CAAC,EAAE,CAElC,GADA,QAAQ,GAAG,CAAC,GACR,EAAM,CACN,IAAM,EAAS,IAAI,UACnB,CAAA,EAAO,MAAM,CAAG,AAAC,IACb,IAAM,EAAU,EAAE,MAAM,CAAC,MAAM,CAC/B,GAAI,CACA,IAAM,EAAW,KAAK,KAAK,CAAC,GAC5B,QAAQ,GAAG,CAAC,GAGZ,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,EAC5B,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,sBAAuB,EACzC,CACJ,EACA,EAAO,UAAU,CAAC,EACtB,CACJ","sources":["<anon>","src/scripts/eventHandlers.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $5qD1E = parcelRequire(\"5qD1E\");\n\nvar $2UrZ2 = parcelRequire(\"2UrZ2\");\n\nvar $e8aKe = parcelRequire(\"e8aKe\");\n// Get references to the cy, info, and walks elements\nconst $c33e153c3b84c13d$var$cyContainer = document.getElementById(\"cy\");\nconst $c33e153c3b84c13d$var$infoPanel = document.getElementById(\"info\");\nconst $c33e153c3b84c13d$var$walksPanel = document.getElementById(\"walks\");\n// Get references to the maximize button and set initial state\nconst $c33e153c3b84c13d$var$maximizeButton = document.getElementById(\"toggleMaximize\");\nlet $c33e153c3b84c13d$var$isMaximized = false;\n// Add click event listener to the maximize button\n$c33e153c3b84c13d$var$maximizeButton.addEventListener(\"click\", ()=>{\n    if ($c33e153c3b84c13d$var$isMaximized) {\n        // Restore previous layout\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"\";\n        $c33e153c3b84c13d$var$isMaximized = false;\n    } else {\n        // Maximize cy panel\n        $c33e153c3b84c13d$var$cyContainer.style.width = \"100%\";\n        $c33e153c3b84c13d$var$cyContainer.style.height = \"100vh\";\n        $c33e153c3b84c13d$var$infoPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$walksPanel.style.display = \"none\";\n        $c33e153c3b84c13d$var$isMaximized = true;\n    }\n});\nfunction $c33e153c3b84c13d$var$toggleLabels() {\n    // Update labelsVisible state\n    const nodelabelStyle = !(0, $e8aKe.getLabelsVisible)() ? \"data(name)\" : \"\"; // Toggles between showing the name and showing nothing\n    const edgeLabelStyle = !(0, $e8aKe.getLabelsVisible)() ? \"data(weight)\" : \"\"; // Toggles between showing the weight and showing nothing\n    (0, $5qD1E.STATE).cy.style().selector(\"node\") // Select nodes\n    .style({\n        label: nodelabelStyle\n    }).selector(\"edge\") // Select edges\n    .style({\n        label: edgeLabelStyle\n    }).update(); // Important to update the style\n    (0, $e8aKe.setLabelsVisible)(!(0, $e8aKe.getLabelsVisible)());\n}\ndocument.getElementById(\"hiddenLabel\").addEventListener(\"click\", $c33e153c3b84c13d$var$toggleLabels);\ndocument.getElementById(\"captureGraph\").addEventListener(\"click\", ()=>{\n    // Get the base64 representation of the graph\n    const base64Image = (0, $5qD1E.STATE).cy.png();\n    // Create a new anchor element to enable downloading\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = base64Image;\n    downloadLink.download = \"graph_capture.png\";\n    // Trigger the download\n    downloadLink.click();\n});\ndocument.getElementById(\"redirectToIgv\").addEventListener(\"click\", ()=>{\n    window.open(\"igv.html\", \"_blank\");\n});\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    (0, $2UrZ2.resizePanels)();\n});\ndocument.getElementById(\"uploadInput\").addEventListener(\"change\", $c33e153c3b84c13d$var$handleFileUpload);\nfunction $c33e153c3b84c13d$var$handleFileUpload(event) {\n    const file = event.target.files[0];\n    console.log(file);\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            const content = e.target.result;\n            try {\n                const jsonData = JSON.parse(content);\n                console.log(jsonData);\n                // Process and visualize the JSON data\n                // For example: visualizeGraph(jsonData);\n                (0, $5qD1E.loadGraphDataFromServer)(jsonData);\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        };\n        reader.readAsText(file);\n    }\n}\n\n\n//# sourceMappingURL=app.e01f888b.js.map\n","import { STATE } from \"./graph\";\nimport { resizePanels } from \"./graphUtilities\";\nimport { loadGraphDataFromServer } from \"./graph\";\nimport { getLabelsVisible, setLabelsVisible } from \"./graphSetup\";\n\n// Get references to the cy, info, and walks elements\nconst cyContainer = document.getElementById(\"cy\");\nconst infoPanel = document.getElementById(\"info\");\nconst walksPanel = document.getElementById(\"walks\");\n\n// Get references to the maximize button and set initial state\nconst maximizeButton = document.getElementById(\"toggleMaximize\");\nlet isMaximized = false;\n\n// Add click event listener to the maximize button\nmaximizeButton.addEventListener(\"click\", () => {\n    if (isMaximized) {\n        // Restore previous layout\n        cyContainer.style.width = \"\";\n        cyContainer.style.height = \"\";\n        infoPanel.style.display = \"\";\n        walksPanel.style.display = \"\";\n        isMaximized = false;\n    } else {\n        // Maximize cy panel\n        cyContainer.style.width = \"100%\";\n        cyContainer.style.height = \"100vh\";\n        infoPanel.style.display = \"none\";\n        walksPanel.style.display = \"none\";\n        isMaximized = true;\n    }\n});\n\nfunction toggleLabels() {\n    // Update labelsVisible state\n    const nodelabelStyle = !getLabelsVisible() ? \"data(name)\" : \"\"; // Toggles between showing the name and showing nothing\n    const edgeLabelStyle = !getLabelsVisible() ? \"data(weight)\" : \"\"; // Toggles between showing the weight and showing nothing\n\n    STATE.cy\n        .style()\n        .selector(\"node\") // Select nodes\n        .style({\n            label: nodelabelStyle,\n        })\n        .selector(\"edge\") // Select edges\n        .style({\n            label: edgeLabelStyle, // Toggles edge labels based on weight\n        })\n        .update(); // Important to update the style\n    setLabelsVisible(!getLabelsVisible());\n}\n\ndocument.getElementById(\"hiddenLabel\").addEventListener(\"click\", toggleLabels);\n\ndocument.getElementById(\"captureGraph\").addEventListener(\"click\", () => {\n    // Get the base64 representation of the graph\n    const base64Image = STATE.cy.png();\n\n    // Create a new anchor element to enable downloading\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = base64Image;\n    downloadLink.download = \"graph_capture.png\";\n\n    // Trigger the download\n    downloadLink.click();\n});\n\ndocument.getElementById(\"redirectToIgv\").addEventListener(\"click\", () => {\n    window.open(\"igv.html\", \"_blank\");\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    resizePanels();\n});\n\ndocument\n    .getElementById(\"uploadInput\")\n    .addEventListener(\"change\", handleFileUpload);\n\nfunction handleFileUpload(event) {\n    const file = event.target.files[0];\n    console.log(file);\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const content = e.target.result;\n            try {\n                const jsonData = JSON.parse(content);\n                console.log(jsonData);\n                // Process and visualize the JSON data\n                // For example: visualizeGraph(jsonData);\n                loadGraphDataFromServer(jsonData);\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        };\n        reader.readAsText(file);\n    }\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$5qD1E","$2UrZ2","$e8aKe","$c33e153c3b84c13d$var$cyContainer","document","getElementById","$c33e153c3b84c13d$var$infoPanel","$c33e153c3b84c13d$var$walksPanel","$c33e153c3b84c13d$var$maximizeButton","$c33e153c3b84c13d$var$isMaximized","addEventListener","style","width","height","display","nodelabelStyle","getLabelsVisible","edgeLabelStyle","STATE","cy","selector","label","update","setLabelsVisible","base64Image","png","downloadLink","createElement","href","download","click","window","open","resizePanels","event","file","target","files","console","log","reader","FileReader","onload","e","content","result","jsonData","JSON","parse","loadGraphDataFromServer","error","readAsText"],"version":3,"file":"app.e01f888b.js.map"}